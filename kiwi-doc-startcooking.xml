<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                         "http://www.docbook.org/xml/4.5/docbookx.dtd">

<chapter id="chap.startcooking">
  <title>Start Cooking</title>
  <indexterm>
    <primary>KIWI</primary>
    <secondary>image preparation</secondary>
  </indexterm>
  <para>
   Before we start cooking, we need to make sure that we have all required ingredients ready
   and set up correctly. In order to use the kiwi tools you must be logged in as root.
  </para>
  <sect1>
   <title>General Preparation for All Recipes</title>
   <para>
    The basic preparation for all recipes.
   </para>
   <sect2>
    <title>Install the KIWI toolset</title>
    <para>
     It is strongly recommended that you use the released version of the KIWI
     tool chain. Adding the Virtualization:Appliances repository to your system
     will allow you to install all KIWI related packages.
    </para>
    <para>
     The commands below illustrate how to <!--add the repository and -->install the
     KIWI tools from the command line using zypper. Alternatively you may
     use the YaST2 GUI to add the repository and accomplish the installation.
    </para>
    <para>
     <!--Add the Tools repository if needed (using openSUSE 11.3 as an example, to see a list of other repositories point you browser at http://download.opensuse.org/repositories/Virtualization:/Appliances )
     # zypper ar http://download.opensuse.org/repositories/Virtualization:/Appliances/openSUSE_11.3/ Virtualization:Appliances-->
     Install kiwi and other needed packages: 
    </para>
<screen>zypper in kiwi kiwi-doc kiwi-templates kiwi-desc-vmxboot kiwi-desc-usbboot kiwi-desc-isoboot kiwi-desc-xenboot kiwi-desc-oemboot squashfs</screen>
     <!--If you previously configured the Tools repository and did not install KIWI just use the above command.-->
    <para>
     The following commands will allow you to update all packages from the repository, including KIWI if it was installed previously.
     Refresh the repository:   
    </para>
<screen>zypper refresh</screen>
    <para>
     Update all installed packages with newer versions:
    </para>
<screen>zypper up</screen>
    <para>
     For detailed information about the <command>zypper</command> command line options see the zypper man page (<command>man zypper</command>).
    </para>
   </sect2>
   <sect2>
    <title>The Directories Where We Cook</title>
    <para>
     Creating images with KIWI requires space in your file system (your hard drive or mounted external storage).
     The amount of space required depends on the size of the packages being used and any additional
     software to be placed into the image.
    </para>
    <para>
     The general guideline for storage space is 8 GB plus the size of any additional software.
     Within the 8 GB storage space one can install the entire distribution, thus this provides
     sufficient space for all the packages you require from the distribution repository.
     For the examples provided here we will use directories in <filename class="directory">/tmp</filename>.
     However, you may choose to locate these working directories anywhere in your file system.
    </para>
    <para>
     The directories created in this step will be used later as command line arguments.
    </para>
    <para>
     Create the temporary build space directory:
    </para>
<screen>mkdir -p /tmp/myiso</screen>
    <para>
     Create the final image directory:
    </para>
<screen>mkdir -p /tmp/myiso-result</screen>
    <para>
     Please note that the directory used for the temporary build space may only be used once.
     The directory will have to be emptied prior to preparing another image in the same directory.
     The KIWI tool chain will produce an error such as: Couldn't create root directory: File exists failed.
    </para>
   </sect2>
  </sect1>
  <sect1>
   <title>Get ready to start cooking</title>
   <para>
    This section provides a quick overview of the basic commands and a short high level description about how KIWI works.
   </para>
   <para>
    The creation of an image with KIWI is a two step process. The first step is the preparation step followed by the
    creation itself. In the preparation step, the so called unpacked image is created in the temporary build space
    directory (<filename>/tmp/myiso</filename> in our examples, as mentioned above). The unpacked image in the
    temporary build space contains your new file system based on one or more software package(s) from the specified
    repositories (more on the repositories later).
   </para>
   <para>
    The creation step uses the file system created in the preparation step as the image root tree to create the
    output image. This image is placed in the final image directory (for example <filename>/tmp/myiso-result</filename>).
    If the image type ISO was requested, the output image is a file with the suffix <filename>.iso</filename>
    representing a live system on CD or DVD. It is also possible to create ISO images that can be used as installation source.
   </para>
   <para>
    In addition to creating the LiveCD ISO image, KIWI is able to create images for full virtual (VMWare/qemu) and
    para-virtual (Xen) environments as well as for USB sticks, PXE network clients and OEM customized Linux systems.
   </para>
   <sect2>
    <title>The Basic Commands</title>
    <para>
     Executing the two step prepare and create process is accomplished with the following commands_
    </para>
<screen>
kiwi --prepare <replaceable>ImageDescriptionPath</replaceable> --root <replaceable>RootPath</replaceable>

kiwi --create <replaceable>RootPath</replaceable> --destdir <replaceable>DestinationPath</replaceable>
</screen>
    <para>
     The <replaceable>ImageDescriptionPath</replaceable> is a directory containing a basic
     description of the ingredients of the image. The <replaceable>RootPath</replaceable>
     is the destination directory for the unpacked image, for example  <filename>/tmp/myiso</filename>.
     The <replaceable>DestinationPath</replaceable> is the path to the final image directory, for example <filename>/tmp/myiso-result</filename>.
    </para>
    <para>
     The KIWI tool chain supports the combination of the previous two command line invocations
     into one. This is accomplished by passing the <option>--build</option> command line option.
     With the --build opting kiwi will still execute 2 distinct steps. However, from a users
     perspective only one command needs to be executed, as shown below.
    </para>
<screen>
kiwi --build <replaceable>ImageDescriptionPath</replaceable> --destdir <replaceable>DestinationPath</replaceable>
</screen>
    <para>
     In this case the unpacked image will be created in a sub-directory of the <replaceable>DestinationPath</replaceable>
     called image-root, following our example KIWI would create <filename>/tmp/myiso-result/image-root</filename>
     for the unpacked image.
    </para>
   </sect2>
   <sect2>
    <title>The Source Repository</title>
    <para>
     As mentioned previously KIWI creates an unpacked image prior to creating the final image by installing packages.
     These packages are extracted from an installation source or so called repository. A repository is a collection of packages.
     Specifying the installation source on the command line is accomplished using the <option>--set-repo</option>
     command line option as follows:
    </para>
<screen>
kiwi --build <replaceable>ImageDescriptionPath</replaceable> --destdir <replaceable>DestinationPath</replaceable> --set-repo <replaceable>RepositoryPath</replaceable>
</screen>
   </sect2>
   <sect2>
    <title>Repository Options</title>
    <para>
     KIWI supports local and Internet based repositories.
    </para>
    <para>
     With help of the <option>--set-repo</option>
     option we can set what is used as repository or overwrite
     the repo URL for the first listed repo from the XML file.
     The change is temporary and will not be written to the XML file.
    </para>
    <para>
     The following examples show how to specify these various repositories on the command line:
    </para>
    <para>
     Using and Internet based repository, such as the openSUSE 11.3 repository:
    </para>
<screen>
kiwi --build <replaceable>ImageDescriptionPath</replaceable> --destdir <replaceable>DestinationPath</replaceable> --set-repo http://download.opensuse.org/distribution/11.3/repo/oss/
</screen>

    <para>
     The openSUSE examples provided by KIWI use the openSUSE online repository and it is not necessary
     to use the <option>--set-repo</option> command line option. How this is configured will be explained
     in later chapter.<!--FIXME-->
    </para>
    <para>
     If you have the openSUSE 11.3 installation DVD you may use it as repository. Insert the DVD into
     your drive and if you are using openSUSE 11.3 it will be mounted as <filename>/media/SU1110.001</filename>.
     If the media is not mounted automatically you may use a regular mount command to mount the DVD_
    </para>
<screen>
mount -t iso9660 /dev/cdrom /media
</screen>
    <para>
     Assuming the DVD got auto mounted the following command demonstrates how we can use
     the mounted DVD as the installation source repository.
    </para>
<screen>
kiwi --build <replaceable>ImageDescriptionPath</replaceable> --destdir <replaceable>DestinationPath</replaceable> --set-repo /media/SU1110.001
</screen>
    <para>
     If you have the install DVD ISO image available, you may use it instead of burning it to a DVD.
    </para>
    <para>
     In order to use the image you first must loop mount it such that it becomes available as a block device. Then use the mount point as the repository path.
    </para>
<screen>
mount -o loop /path-to-the-iso-file/filename.iso /mnt
kiwi --build <replaceable>ImageDescriptionPath</replaceable> --destdir <replaceable>DestinationPath</replaceable> --set-repo /mnt
</screen>
   </sect2>
   <sect2>
    <title>A few words about the speed</title>
    <para>
     Before we move on to our first example, a few words about the speed at which the image can be created.
     KIWI will access the specified repository to obtain the packages required for the image to be created.
     Thus if you are using an online repository the speed of creation will be dominated by the bandwidth of
     your Internet connection. Using a mounted DVD the speed will be dependent on the speed of your DVD
     drive, and using the mounted ISO image your hard drive access performance will have a strong influence
     on the image creation speed.
    </para>
    <para>
     Generally the image creation will be fastest if you access a local repository, i.e. the installation
     DVD, a loop mounted ISO image or even a local mirror of the online repository on you LAN.
    </para>
   </sect2>
   <sect2>
     <title>Caveats</title>
     <para>
      If you are building a 64 bit image you will need to use <command>qemu-kvm</command> (from the kvm package) instead of <command>qemu</command>.
     </para>
     <para>
      The image name for example <filename>suse-11.3-live-iso.i686-2.5.1.iso</filename> contains the system architecture,
      i686 in this case. In all our recipes you will need to substitute the proper names if you build on a different architecture.
     </para>
     <para>
      It is possible to build a 32 bit image (x86) on a 64 bit (x86_64) system by prefixing the kiwi command with linux32 as follows:
     </para>
<screen>linux32 kiwi --build suse-11.3-JeOS --destdir /tmp/myjeos --type iso
</screen>
   </sect2>
 </sect1>
</chapter>
