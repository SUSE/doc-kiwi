<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                         "http://www.docbook.org/xml/4.5/docbookx.dtd">

<chapter id="chap.workflow">
  <title>Basic Workflow</title>
  <indexterm>
    <primary>KIWI</primary>
    <secondary>Workflow</secondary>
  </indexterm>
  
  <sect1 id="sec.workflow.introduction">
    <title>Introduction</title>
      <para>KIWI creates images in a two step process, as mentioned previously.
    The first step, the <emphasis>prepare</emphasis> operation, generates a
    so called <emphasis>unpacked image</emphasis> tree (directory)
    based on the specified <emphasis>package sources (repositories)</emphasis>
    in the <filename>config.xml</filename> configuration file. The
    <filename>config.xml</filename> file is part of the
    <emphasis>configuration directory (tree)</emphasis> that describes the
    image to be created by KIWI. The second step, the
    <emphasis>create</emphasis> operation, creates the
    <emphasis>packed image</emphasis> or <emphasis>image</emphasis> in the
    specified format based on the unpacked image and the
    <emphasis>boot image</emphasis> description specified in the
    <filename>config.xml</filename> file. The boot image description is
    supplied by KIWI.
    <!--insert xref to install chapter here, when we have it--> </para>


    <figure id="fig.imageservingarch">
      <title>Image Serving Architecture</title>
      <mediaobjectco>
        <imageobjectco>
          <areaspec>
            <area coords="100 100" id="co.imageservingarch.root"/>
            <area coords="200 200" id="co.imageservingarch.kernel"/>
          </areaspec>
          <imageobject>
            <imagedata fileref="images/intro.png"/><!-- width="50%" -->
          </imageobject>
          <calloutlist>
            <callout arearefs="co.imageservingarch.root">
              <para>Encapsulated system reachable via chroot</para>
            </callout>
            <callout arearefs="co.imageservingarch.kernel">
              <para>Encapsulated system reachable via kernel
                filesystem/extension drivers</para>
            </callout>
          </calloutlist>
        </imageobjectco>
      </mediaobjectco>
    </figure>
  
  <para>Prior to building an image with KIWI it is important to understand
    the make up of an image and the general concepts of a Linux system from
    boot to running system.</para>
  <para>A regular installation of a Linux system starts from a given
    installation source, this could be an installation CD/DVD, a PXE boot
    environment, or an install media that accesses the Internet to retrieve
    software for installation. In many installation user interaction with an
    installer takes place to collect data such as
    <emphasis>software to be installed</emphasis>,
    <emphasis>timezone</emphasis>, and <emphasis>user</emphasis> information.
    Once all information is collected the installer installs the necessary and
    specified software onto the computer at hand based on the available
    software sources (repositories). Often a final configuration procedure
    takes place after the install process is complete. This configuration
    process contains automated setup functions and may include user
    interaction.</para>
  <para>Opposed to a regular install process described above, an image
    is a <emphasis>completed installation</emphasis> of a Linux system in a
    file. The image represents an operational system. The behavior of the
    image varies depending on the image type and image configuration. It is
    possible to create images that just run inside a virtual environment and
    do not requires any configuration at start up, as all the configuration
    information is already encoded in the image. It is possible to create
    images that automatically configure themselves in a designated
    environment. Further it is possible to create images that follow an
    interactive configuration procedure when booted for the first time. An
    image can also be created to employ any combination of configuration
    options. The image creation process itself occurs without user interaction.
    All information that is needed to create the image is encoded in the
    <filename>config.xml</filename> file and optionally in the
    <filename>config.sh</filename> and <filename>images.sh</filename> scripts
    as well as the optional <emphasis>overlay tree (directory)</emphasis>
    called <filename>root</filename>. The configuration information is stored
    in the so called <emphasis>image description</emphasis> or
    <emphasis>configuration directory</emphasis>.</para>
  </sect1>
  
  <sect1 id="sec.workflow.bootprocess">
    <title>Boot Process</title>
    <indexterm>
      <primary>KIWI</primary>
      <secondary>boot process</secondary>
    </indexterm>
    <indexterm>
      <primary>boot process</primary>
    </indexterm>
  <para>The creation of an image with KIWI is always divided into two
    basic steps: the <emphasis>prepare</emphasis> and the
      <emphasis>create</emphasis> step. The create step requires the
    prepare step to be completed successfully. Within this first prepare
    step, KIWI builds a new root tree or, in KIWI speak, a new unpacked
    image. The building of a new root tree consists of the creation of
    the directory specified to hold it and the installation of the
    selected packages on it. The installation of software packages is
    driven by a package manager. KIWI supports the smart and zypper package
    managers. The prepare step executes the following major stages: </para>

  <itemizedlist>
    <listitem>
      <formalpara>
        <title>Creating Root Directory</title>
        <para>To prevent accidental deletion of an existing root tree,
          KIWI will stop with an error message if this folder already
          exists, unless the option <option>--force-new-root</option> is
          used in which case the existing root will be deleted. </para>
      </formalpara>
    </listitem>
    <listitem>
      <formalpara>
        <title>Installing Packages</title>
        <para>First the selected package manager (zypper by default) is
          instructed to use the repositories specified in the image
          description file. Then the packages specified in the bootstrap
          section are installed. These packages are installed externally
          to the target root system (i.&nbsp;e. not chroot’ed) and
          establish the initial environment, so the rest of the process
          may run chroot’ed. Essential packages in this section are
          filesystem and glibc-locale. In practice you only need to
          specify those two, since the rest of the packages will be
          pulled because of the dependency system. To save space in your
          image you could schedule a set of packages for deletion after
          the package installation phase is over by listing them in the
            <sgmltag>delete</sgmltag> section</para>
      </formalpara>
    </listitem>
    <listitem>
      <formalpara>
        <title>Executing User Defined config.sh Script</title>
        <para>At the end of the preparation stage the optional script
          named <filename>config.sh</filename> is called. This script
          should be used to configure the system which means, for
          example, the activation of services. For a detailed
          description what functions are already available to configure
          the system, refer to the <xref linkend="ref.kiwi.config.sh"/>
          man page.</para>
      </formalpara>
    </listitem>
    <listitem>
      <formalpara>
        <title>Managing New Root Tree</title>
        <para>At this point you can make changes on your unpacked image
          so it fits your purpose better. Bear in mind that changes at
          this point will be discarded and not repeated automatically if
          you rerun the <emphasis>prepare</emphasis> phase unless you
          include them in your original <filename>config.xml</filename>
          file and/or <filename>config.sh</filename> script. Please also
          note that the image description has been copied into the new
          root below the directory <filename class="directory"
              ><replaceable>new-root</replaceable>/image</filename>. Any
          subsequent create step will read the image description
          from the new root tree and not from the original
          image description location. According to this, if you need to
          change the image description data after the prepare call has
          finished, you need to change it inside the new root tree as
          well as in your original description directory to prevent
          loosing the change when your root tree will be removed later
          for some reason. </para>
      </formalpara>
    </listitem>
  </itemizedlist>

  <para>After the prepare step has finished successfully, a subsequent
    building of an image file follows or, in KIWI speak, a new packed
    image. The building of an image requires a successfully prepared new
    root tree in the first place. Using this tree, multiple image types
    can be created. So to speak, it’s possible to create a VMware image
    and a Xen image from the same prepared root tree. The create step
    executes the following major stages: </para>

  <itemizedlist>
    <indexterm>
      <primary>KIWI</primary>
      <secondary>stages</secondary>
    </indexterm>
    <listitem>
      <formalpara>
        <title>Executing User Defined Script images.sh</title>
        <indexterm>
          <primary>KIWI</primary>
          <secondary>user definied scripts</secondary>
        </indexterm>
        <para>At the beginning of the creation stage the optional script
          named <filename>images.sh</filename> is called. This script
          has no distinctive use case like
            <filename>config.sh</filename>. However, it is most often
          used to remove packages which were pulled in by a dependency,
          but are not really required for later use of the operating
          system. For a detailed description what functions are already
          available to <filename>images.sh</filename>, refer to the
            <xref linkend="ref.kiwi.images.sh"/> man page.</para>
      </formalpara>
    </listitem>
    <listitem>
      <formalpara>
        <title>Creating Requested Image Type</title>
        <indexterm>
          <primary>KIWI</primary>
          <secondary>requested image types</secondary>
        </indexterm>
        <para>What image type(s) a KIWI image supports, depends on what
          types have been setup in the main image description file
            <filename>config.xml</filename>. At least one type must be
          setup. The following picture shows what image types are
          currently supported by KIWI:</para>
      </formalpara>

      <figure id="fig.imagetypes">
        <title>Image Types</title>
        <mediaobjectco>
          <imageobjectco>
            <areaspec>
              <area coords="100 100" id="co.imagetypes.live"/>
              <area coords="200 200" id="co.imagetypes.virtualdisk"/>
              <area coords="300 300" id="co.imagetypes.oemdisk"/>
              <area coords="400 400" id="co.imagetypes.pxe"/>
            </areaspec>
            <imageobject>
              <imagedata fileref="images/types.png"/><!-- width="60%" -->
            </imageobject>
            <calloutlist>
              <callout arearefs="co.imagetypes.live">
                <para>Live Image on CD, DVD or USB stick</para>
              </callout>
              <callout arearefs="co.imagetypes.virtualdisk">
                <para>Full virtual system which can be played in VMware, Xen, 
                  Amazon Cloud, etc. Guest configuration can be created.</para>
              </callout>
              <callout arearefs="co.imagetypes.oemdisk">
                <para>Preload system with install media on CD or USB stick</para>
              </callout>
              <callout arearefs="co.imagetypes.pxe">
                <para>Network boot image. Kiwi also provides the bootp environment via the package kiwi-pxeboot</para>
              </callout>
            </calloutlist>
          </imageobjectco>
        </mediaobjectco>
      </figure>
    </listitem>
  </itemizedlist>

  <para>Detailed information including a step by step guidance how to
    call KIWI and how to make use of the result image can be found in
    the image type specific sections later in this document. </para>

    <para>Today’s Linux systems are using a special boot image to control
      the boot process. This boot image is called initrd. The Linux
      kernel loads this compressed cpio initial ramdisk into RAM and
      calls init or (if present) the program linuxrc. The KIWI image
      system also handles the creation of this boot image. Each
      image type has its own special boot code and shares the common
      parts in a set of module functions. The image descriptions for the
      boot images are provided by KIWI and thus the user has in almost
      all cases no need to take care for the boot image. </para>

    <figure id="fig.workflow.bootprocess">
      <title>Boot Process</title>
      <!-- The coordinates in the coords attribute are just dummy
           values
        -->
      <mediaobjectco>
        <imageobjectco>
          <areaspec>
            <area coords="100 100" id="co.workflow.bootprocess.desc"/>
            <area coords="200 200" id="co.workflow.bootprocess.desccreated"/>
          </areaspec>
          <imageobject>
            <imagedata fileref="images/activation.png"/><!-- width="50%" -->
          </imageobject>
          <calloutlist>
            <callout arearefs="co.workflow.bootprocess.desc">
              <para>Descriptions are provided by KIWI, use is recommended but
                not required</para>
            </callout>
            <callout arearefs="co.workflow.bootprocess.desccreated">
              <para>A description needs to be created or a template can be
                used</para>
            </callout>
          </calloutlist>
        </imageobjectco>
      </mediaobjectco>
    </figure>


    <para>Furthermore, KIWI automatically creates this boot image along
      with the requested image type. It does that by calling itself in a
      prepare and create call. There is no difference in terms of the
      description of such a boot image compared to the system image
      description. The system image description is the one the user
      creates and it represents the later operating system, whereas the
      boot image only lives temporarily in RAM as long as the system
      image will be activated. The boot image descriptions are stored in
        <filename>/usr/share/kiwi/image/*boot</filename> and can be
      built in the same way as the system image. A boot image without a
      corresponding system image doesn’t make sense, though. </para>
  </sect1>

  <sect1 id="sec.hooks">
	<title>Boot image Hook-Scripts</title>
	<indexterm>
		<primary>KIWI</primary>
		<secondary>hook scripts</secondary>
	</indexterm>
	<indexterm>
		<primary>hook scripts</primary>
	</indexterm>
	<para>
		When booting an image the first time the kiwi boot code runs.
		While in that boot code there are several places users can
		hook in custom shell script code to extend the boot workflow
		according to their needs. The following describes how to setup
		the hook scripts so that they end up in the kiwi created boot
		image (initrd). The existence, name and location of hooks
		depends on the image type and is explained in the chapter
		describing that image type.
	</para>
	<itemizedlist>
		<listitem>
			<para>
				all hook scripts are searched in <filename>/kiwi-hooks</filename>
				It's therefore important that the scripts are placed in that
				directory. In order to do that it's best to store all the
				hook scripts in a tar archive

<screen>
mkdir kiwi-hooks
--> place all scripts inside kiwi-hooks
tar -cf kiwi-hooks.tgz kiwi-hooks/
</screen>

				The tarball itself must be stored in the image description
				directory at the same level where your system image
				XML description (config.XML) resides.
			</para>
		</listitem>
		<listitem>
			<para>
				A hook script is called by its name followed by the suffix
				<filename>.sh</filename>. It's required that your script
				is stored exactly with that name and suffix inside the archive.
				The script code itself is handled as inplaced code. This means
				no extra shell process is started to run the script. According
                to this the hook script has full access to all variables of the
				boot environment and it's not required to have the 'x' bit
                set on the file.
			</para>
		</listitem>
		<listitem>
			<para>
				Hook scripts are called in kiwi's boot code only. This means
				the script has to be part of the boot image created by kiwi.
				In order to do that you need to place the following statement
				in your system image config.xml
<screen>
&lt;packages type="image"&gt;
	&lt;archive name="kiwi-hooks.tgz" bootinclude="true"/&gt;
&lt;/packages&gt;
</screen>
				With the attribute bootinclude set to true, kiwi will
				integrate the kiwi-hooks.tgz tarball into the boot image.
				Please note if you are using a prebuilt boot image this
				won't have any effect and you need to build this boot image
				with the hook scripts in it at least once before you use
				it as prebuilt boot image again. 
			</para>
		</listitem>
	</itemizedlist>
	<para>
		The following is a list of predefined hooks and their meaning
	</para>
	<itemizedlist>
		<listitem>
			<formalpara>
			<title>init</title>
			<para>
			This hook is called before udev is started. The hook
			exists only for the <emphasis>pxe</emphasis> image type 
			</para>
			</formalpara>
		</listitem>

		<listitem>
            <formalpara>
            <title>preconfig|postconfig</title>
            <para>
			This hooks are called before and after the client configuration files
			(CONF contents) are setup. The hooks exists only for
			the <emphasis>pxe</emphasis> image type
            </para>
            </formalpara>
        </listitem>

		<listitem>
            <formalpara>
            <title>predownload|postdownload</title>
            <para>
			This hooks are called before and after the client image received
			the root filesystem. The hooks exists only for
			the <emphasis>pxe</emphasis> image type 
            </para>
            </formalpara>
        </listitem>
		
		<listitem>
            <formalpara>
            <title>preImageDump|postImageDump</title>
            <para>
			This hooks are called before and after the install image is
			dumped on the target disk. The hooks exists only for
			the <emphasis>oem</emphasis> image type
            </para>
            </formalpara>
        </listitem>

		<listitem>
            <formalpara>
            <title>preLoadConfiguration|postLoadConfiguration</title>
            <para>
			This hooks are called before and after the client configuration
			file config.MAC is loaded. The hooks exists only for
            the <emphasis>pxe</emphasis> image type
            </para>
            </formalpara>
        </listitem>

		<listitem>
            <formalpara>
            <title>premount|postmount</title>
            <para>
			This hooks are called before and after the client root
			filesystem is mounted. The hooks exists only for
            the <emphasis>pxe</emphasis> image type
            </para>
            </formalpara>
        </listitem>

		<listitem>
            <formalpara>
            <title>prenetwork|postnetwork</title>
            <para>
			This hooks are called before and after the client network
			is setup. The hooks exists only for
			the <emphasis>pxe</emphasis> image type
            </para>
            </formalpara>
        </listitem>

        <listitem>
            <formalpara>
            <title>prepartition|postpartition</title>
            <para>
			This hooks are called before and after the client creates
			the partition table on the target disk. The hooks exists only
			for the <emphasis>pxe</emphasis> image type
            </para>
            </formalpara>
        </listitem>

        <listitem>
            <formalpara>
            <title>preprobe|postprobe</title>
            <para>
			This hooks are called before and after the loading of modules
			not handled by udev. The hooks exists only for the
			<emphasis>pxe</emphasis> image type
            </para>
            </formalpara>
        </listitem>

        <listitem>
            <formalpara>
            <title>preswap|postswap</title>
            <para>
			This hooks are called before and after the creation of the
			swap space. The hooks exists only for the <emphasis>pxe</emphasis>
			image type
            </para>
            </formalpara>
        </listitem>

        <listitem>
            <formalpara>
            <title>preactivate</title>
            <para>
			This hook is called before the root filesystem is moved to /
			The hook exists only for the <emphasis>pxe</emphasis>
            image type
            </para>
            </formalpara>
        </listitem>

        <listitem>
            <formalpara>
            <title>preCallInit</title>
            <para>
			This hook is called in preinit but before init/systemd is started
			At call time the root filesystem has already moved to /. The
			hook exists only for the <emphasis>oem</emphasis> image type
            </para>
            </formalpara>
        </listitem>		

        <listitem>
            <formalpara>
            <title>preException</title>
            <para>
			This hook is called before a system error is handled, the
			actual error message is passed as parameter. This is a global
            hook and can be used for all image types
            </para>
            </formalpara>
        </listitem>

        <listitem>
            <formalpara>
            <title>preHWdetect</title>
            <para>
			This hook is called before the install image boot code searches
			for the possible target storage device(s). The hook exists only
			for the <emphasis>oem</emphasis> image type
            </para>
            </formalpara>
        </listitem>

        <listitem>
            <formalpara>
            <title>preNetworkRelease</title>
            <para>
			This hook is called before the network connection is released.
			The hook exists only for the <emphasis>pxe</emphasis> image type
            </para>
            </formalpara>
        </listitem>
	</itemizedlist>
  </sect1>

  <sect1 id="sec.bootcustomization">
	<title>Boot image customization</title>
	<indexterm>
		<primary>KIWI</primary>
		<secondary>initrd customization</secondary>
	</indexterm>
	<indexterm>
		<primary>initrd customization</primary>
	</indexterm>
	<para>
      KIWI provides boot image descriptions for all the different image
      types which in almost all cases should be suitable to boot the image.
      Nevertheless sometimes people have the need to customize the initrd.
      In order to do that without directly changing the default description
      KIWI provides the following possibilities. For a better understanding
      this is separated into the following Question and Answer sections:
	</para>
	<itemizedlist>
		<listitem>
			<formalpara>
			<title>The boot image seems too big ?</title>
			<para>
			KIWI includes all required tools and libraries to operate in
			all possible modes for the desired image type. If only one
			mode is used it is safely possible to remove more data from
			the initrd to make it smaller and increase boot time.
			Therefore you can add the following strip section in the
			system image XML as part of the main image section
<screen>
&lt;strip type="delete"/&gt;
    &lt;file name="..."/&gt;
&lt;/strip&gt;
</screen>
			Be aware that removal of files also can break the entire
			initrd functionality
			</para>
			</formalpara>
		</listitem>

		<listitem>
			<formalpara>
			<title>How to add missing drivers ?</title>
			<para>
			KIWI uses a subset of the kernel. If you encounter missing
			parts for your use case add the following drivers section
            in the system image XML as part of the main image section
<screen>
&lt;drivers type="drivers"/&gt;
    &lt;file name="drivers/..."/&gt;
&lt;/drivers&gt;
</screen>
            If the driver is provided by a package you additionally have
			to add that package as a bootincluded package to the following
			packages section

<screen>
&lt;packages type="image"/&gt;
    &lt;package name="..." bootinclude="true"/&gt;
&lt;/packages&gt;
</screen>
			</para>
			</formalpara>
		</listitem>

		<listitem>
            <formalpara>
            <title>How to add missing tools/libraries ?</title>
			<para>
			Additional software can be added by a bootincluded package as
			mentioned above. or by a bootincluded archive section which
			is not recommended. After the software has been installed kiwi
			operates on a predefined tool set which you can see in the
			tools strip section in <filename>/usr/share/kiwi/modules/KIWIConfig.txt</filename>
			if the tool is not part of that list it's required to add
			the following strip section in your system image XML
			as part of the main image section
<screen>
&lt;strip type="tools"/&gt;
    &lt;file name="..."/&gt;
&lt;/strip&gt;
</screen>
			name is the basename of the tool not its path
			</para>
			</formalpara>
        </listitem>

		<listitem>
            <formalpara>
            <title>How to add additional boot code ?</title>
			<para>
			If additional code is required it can only be added and called
			as part of the predefined entry points called <emphasis>hooks</emphasis>.
			Read more about hook scripts in <xref linkend="sec.hooks"/>
			</para>
            </formalpara>
        </listitem>

		<listitem>
            <formalpara>
            <title>What if I need my own boot code ?</title>
			<para>
			If the hook scripts doesn't allow the required extension it's
			best to clone the bootimage code entirely, rename it and maintain
			an own version were you can add all kind of required changes
			designed for your use case
			</para>
            </formalpara>
        </listitem>
	</itemizedlist>
  </sect1>


  <sect1 id="sec.workflow.bootparameters">
    <title>Boot Parameters</title>
    <indexterm>
      <primary>KIWI</primary>
      <secondary>boot parameters</secondary>
    </indexterm>
    <indexterm>
      <primary>boot parameters</primary>
    </indexterm>
    <para> When booting an image created by KIWI using one of the
      provided boot images, there are some useful kernel parameters
      mainly meant for debugging purposes. Note the following parameters
      are only useful if the KIWI initrd is used. In case of any other
      initrd code written by yourself or simply because KIWI replaced
      itself with the distribution specific mkinitrd tool, the parameters
      might not have any effect. </para>

    <itemizedlist>
      <listitem>
        <formalpara>
          <title><parameter>kiwidebug=1</parameter></title>
          <para>If the boot process encounters a fatal error, the system
            normally reacts with a reboot after 120 seconds. This so
            called <quote>exception</quote> can be influenced by the
            kiwidebug parameter. If set to 1, the system will stop and
            provide the user with a shell prompt instead of a reboot.
            This shell contains some basic standard commands which could
            help to find the cause of the problem. </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title><parameter>kiwistderr=/dev/...</parameter></title>
          <para>While the system boots, KIWI writes messages to tty1 and
            tty3. The tty1 messages are high-level information whereas
            the tty3 messages represents the shell debug output and any
            error messages from the commands called. With the kiwistderr
            parameter one can combine both message sets and specify
            where to write them to. It’s very common to set <filename
              class="devicefile">/dev/console</filename> as possible
            alternative to the default logging behavior.</para>
        </formalpara>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="sec.workflow.common-specific-code">
    <title>Common and Distribution Specific Code</title>
    <indexterm>
      <primary>KIWI</primary>
      <secondary>common code</secondary>
    </indexterm>
    <indexterm>
      <primary>KIWI</primary>
      <secondary>distribution specific code</secondary>
    </indexterm>
    <para> KIWI has been developed to be usable for any Linux
      distribution. However, each Linux distribution is different. On
      one hand, KIWI provides common code <!--FIXME--></para>

    <para>By design of a Linux distribution there are differences
      between each of them. With KIWI we provide on one hand the code
      which is common to all Linux distributions, according to standards
      and on the other hand there is also code where we have to
      distinguish between the distribution type. </para>

    <para>In the case of specific tasks mostly related to
      booting, KIWI provides a set of functions which all
      contain a distribution prefix. As this project uses SUSE Linux as
      base distribution, all required distribution specific tasks have
      been implemented for SUSE. Other distributions could be missing.
      The existing implementation for SUSE can be adapted to
      other distributions very easily, though. </para>

    <para>A look into the code therefore will show you functions which
      are prefixed by <quote>suse</quote> as well as scripts whose names
      starts with <quote>suse-</quote>. If you see such a prefix,
      script, or function, you can be assured that this is something
      distribution specific. If you plan to use KIWI with another
      distribution than SUSE, you need to adapt it. For example, the
      boot workflow is controlled by a program called
        <command>linuxrc</command> which in KIWI is a script represented
      by <command>suse-linuxrc</command>. Another example is the
      function <function>suseStripKernel</function>, which is able to
      remove everything but a specified list of kernel drivers from the
      SUSE kernel. </para>

    <para>The prefixed implementation allows us to integrate all the
      distribution specific tasks into one project but this of course
      requires the help and knowledge of the people who are familiar with
      their preferred Linux distribution. </para>
  </sect1>
</chapter>
