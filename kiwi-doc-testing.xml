<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                         "http://www.docbook.org/xml/4.5/docbookx.dtd">

<chapter id="chap.testing">
  <title>KIWI Testsuite</title>
  <para>The KIWI test suite is useful to perform basic quality checks on
    the image root directory. The test cases are stored in
    subdirectories below <filename>/usr/share/kiwi/tests</filename>. To run the testsuite
    call KIWI as follows: </para>

  <!-- kiwi testsuite <image-root> [ test name test name ...]  -->
  <cmdsynopsis>
    <command>kiwi</command> 
    <arg choice="plain">testsuite</arg> 
    <arg choice="plain"><replaceable>image-root</replaceable></arg>
    <group choice="opt" rep="repeat">
      <group choice="plain">
        <arg choice="plain">test</arg>
        <option>name</option>
      </group>
      <group choice="plain">
        <arg choice="plain">test</arg>
        <option>name</option>
      </group>
    </group>
  </cmdsynopsis>

  <para>If not test names are set the default tests rpm and ldd run. The
    name of a test corresponds with the name of the directory the test
    is implemented in. </para>
  <sect1>
    <title>Testsuite Packages</title>
    <para> If a test requires special software to be installed but this
      software is not an essential part of the image itself it can be
      specified as testsuite packages in the system image
        <filename>config.xml</filename> as follows: </para>
    <screen>&lt;packages type="testsuite"&gt; 
  &lt;package name="..."/&gt;
&lt;/packages&gt; </screen>

    <para>The testsuite packages are installed when calling KIWI with
      the testsuite option and are removed after the tests has finished.
    </para>
  </sect1>

  <sect1>
    <title>Creating a Test</title>
    <para> The test itself is defined by a XML description
        <filename>test-case.xml</filename> and its template definition
      file
        <filename>/usr/share/kiwi/modules/KIWISchemaTest.rnc</filename>
      The following example shows the basic structure of the
        <sgmltag>rpm</sgmltag> test: </para>

    <screen>&lt;test_case name="rpm" 
  summary="check rpm database and verify all rpms" 
  description="check if rpm db is present, run rpm‘s build-in Verify method" </screen>

    <screen>&lt;requirements&gt; 
  &lt;req type="directory"&gt;/var/lib/rpm&lt;/req&gt; 
  &lt;req type="file"&gt;/var/lib/rpm/__db.000&lt;/req&gt; 
  &lt;req type="file"&gt;/var/lib/rpm/Packages&lt;/req&gt;
&lt;/requirements&gt; </screen>


    <screen>&lt;test type="binary" place="extern"&gt;
  &lt;file&gt;rpm.sh&lt;/file&gt;
  &lt;params&gt;CHROOT&lt;/params&gt; &lt;/test&gt;
&lt;/test_case&gt;</screen>


    <para>There are basically two sections called
        <sgmltag>equirements</sgmltag> and <sgmltag>test</sgmltag>. In
      requirements you define what files/directories or packages has to
      be present in your image to run the test. For example if you need
      to check the RPM database, the database has to be present within
      the image. All requirements are checked, and if any of them fail
      the test won’t be executed and an error message is printed. There
      are three types of requirements: </para>

    <variablelist>
      <varlistentry>
        <term><sgmltag>file</sgmltag></term>
        <listitem>
          <para>Existence of a file</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><sgmltag>directory</sgmltag></term>
        <listitem>
          <para>Existence of a directory </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><sgmltag>rpm-package</sgmltag></term>
        <listitem>
          <para>Existence of a package </para>
        </listitem>
      </varlistentry>      
    </variablelist>
    
    <para>The test section defines the test script. It could be a
      binary, shell script or any other kind of executable. Scripts are
      expected to be in the same directory as where the XML definition
      for the test resides. There are two types of scripts, extern and
      intern. </para>

    <itemizedlist>
      <listitem>
        <para>External scripts are executed outside of the image and are
          preferred. Their first parameter should be CHROOT. This
          parameter is changed to the real path of the image chroot
          directory. </para>
      </listitem>
      <listitem>
        <para>Internal scripts are executed inside image using the
            <command>chroot</command> command. Files are copied into the
          image and deleted after execution. </para>
      </listitem>
    </itemizedlist>

    <para>A test script always has to return 0 in case of a test to
      pass, or 1 if any error occur. All messages printed to standard
      and error output are stored and printed out of the test has
      failed. </para>

  </sect1>
</chapter>
