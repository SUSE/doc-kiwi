<!-- Converted by suse-upgrade version 1.1 -->

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="chap.description"><title>KIWI Image Description</title><info/>
 
 <para>
  To be able to create an image with KIWI, a so called image
  description must be created. The image description is represented by a
  directory which needs to contain at least one file named
  <filename>config.xml</filename> or
  <filename class="extension">*.kiwi</filename>. A good start for such
  a description can be found in the examples provided in
  <filename>/usr/share/doc/packages/kiwi/examples</filename>.
 </para>

 <remark condition="clarity">
  2015-07-24 - fs: TODO
 </remark>

 <remark condition="clarity">
  1. Explain templates (packages, overview of templates, where to find them, how to use them, how to customize)
 </remark>

 <remark condition="clarity">
  2. How to manually validate, editor support (loading schema or DTD)
 </remark>

 <remark condition="clarity">
  3. Shorten, restructure for a better readability
 </remark>

 <remark condition="cl">
  4. Point to schema description, explain how to use/read it
 </remark>


 <figure xml:id="fig.description.imagedescrdir">
  <title>Image Description Directory</title>
  <mediaobject>
   <imageobject role="fo">
    <imagedata fileref="description.svg" width="40%" format="SVG"/>
   </imageobject>
   <imageobject role="html">
    <imagedata fileref="description.png" width="40%" format="PNG"/>
   </imageobject>
  </mediaobject>
 </figure>
 <para>
  The following additional information is optional for the process of
  building an image, but most often mandatory for the functionality of the
  created operating system:
 </para>
 <variablelist>
  <varlistentry>
   <term><filename>images.sh</filename>
   </term>
   <listitem>
    <para>
     Optional configuration script while creating the packed image. This
     script is called at the beginning of the image creation process. It is
     designed to clean-up the image system. Affected are all the programs
     and files only needed while the unpacked image exists.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><filename>config.sh</filename>
   </term>
   <listitem>
    <para>
     Optional configuration script while creating the unpacked image. This
     script is called at the end of the installation, but
     <emphasis>before</emphasis> the package scripts have run. It is
     designed to configure the image system, such as the activation or
     deactivation of certain services
     (<systemitem class="service">insserv</systemitem>). The
     call is not made until after the switch to the image has been made with
     chroot.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><filename class="directory">root</filename>
   </term>
   <listitem>
    <para>
     Subdirectory that contains special files, directories, and scripts for
     adapting the image environment <emphasis>after</emphasis> the
     installation of all the image packages. The entire directory is copied
     into the root of the image tree using <command>cp</command>
     <option>-a</option>.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><filename>config-yast-autoyast.xml</filename>
   </term>
   <listitem>
    <para>
     Configuration file which has been created by AutoYaST. To be able to
     create such an AutoYaST profile, run:
    </para>
<screen><command>yast2</command> autoyast</screen>
    <para>
     Once you have saved the information from the AutoYaST UI as
     <filename>config-yast-autoyast.xml</filename> file in your image
     description directory KIWI will process on the file and setup your
     image as follows:
    </para>
    <orderedlist>
     <listitem>
      <para>
       While booting the image YaST is started in AutoYaST mode
       automatically
      </para>
     </listitem>
     <listitem>
      <para>
       The AutoYaST description is parsed and the instructions are handled
       by YaST. In other words the <emphasis>system configuration</emphasis>
       is performed
      </para>
     </listitem>
     <listitem>
      <para>
       If the process finished successfully the environment is cleaned and
       AutoYaST won’t be called at next reboot.
      </para>
     </listitem>
    </orderedlist>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><filename>config-cdroot.tgz</filename>
   </term>
   <listitem>
    <para>
     Archive which is used for ISO images only. The data in the archive is
     uncompressed and stored in the CD/DVD root directory. This archive can
     be used, for example, to integrate a license file or information
     directly readable from the CD or DVD.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><filename>config-cdroot.sh</filename>
   </term>
   <listitem>
    <para>
     Along with the <filename>config-cdroot.tgz</filename> one can provide a
     script which allows to manipulate the extracted data.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><filename class="directory">config/</filename>
   </term>
   <listitem>
    <para>
     Optional subdirectory that contains Bash scripts that are called after
     the installation of all the image packages, primarily to
     remove the parts of a package that are not needed for the operating
     system. The name of the Bash script must resemble the package name
     listed in the config.xml.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
 <section xml:id="sec.description.config.xml">
  <title>The config.xml File</title>
  <para>
   The mandatory image definition file is divided into different sections
   which describes information like the image name and type as well as the
   packages and patterns the image should consist of.
  </para>

  <para>
   The following information explains the basic structure of the XML
   document. When KIWI is executed, the XML structure is validated by the
   KIWI RELAX NG based schema. For details on attributes and values
   please refer to the schema documentation file at
   <filename>/usr/share/doc/packages/kiwi/kiwi.rng.html</filename>.
  </para>

  <section xml:id="sec.description.image">
   <title><tag>image</tag> Element</title>
<screen>&lt;image schemaversion="6.2" name="iname"
  displayname="text"
  kiwirevision="number"
  id="10 digit number"&gt;
  ...
&lt;/image&gt;</screen>
   <para>
    The image definition starts with an <tag>image</tag> tag and
    requires the schema format at version 2.0. The attribute
    <tag class="attribute">name</tag> specifies the name of the
    image which is also used for the filenames created by KIWI. Because we
    don’t want spaces in filenames the
    <tag class="attribute">name</tag> attribute must not
    have any spaces in its name.
   </para>
   <para>
    The following optional attributes can be inserted in the
    <tag>image</tag> tag:
   </para>
   <variablelist>
    <varlistentry>
     <term><tag class="attribute">displayname</tag>
     </term>
     <listitem>
      <para>
       Allows setup of the boot menu title for the selected boot loader. So
       you can have <emphasis>suse-SLED-foo</emphasis> as the image name but
       a different name as the boot display name. Spaces are not allowed in
       the display name because it causes problems for some boot loaders and
       kiwi did not take the effort to separate the ones which can display
       them correctly from the ones which can't
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">kiwirevision</tag>
     </term>
     <listitem>
      <para>
       specifies a KIWI git revision number which is known to build a
       working image from this description. If the KIWI git revision doesn't
       match the specified value, the process will exit. The currently used
       git revision can be queried by calling <command>kiwi</command>
       <option>--version</option>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">id</tag>
     </term>
     <listitem>
      <para>
       sets an identification number which appears as file
       <filename>/etc/ImageID</filename> within the image.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    Inside the <tag>image</tag> section the following mandatory and
    optional subelements exists. The simplest image description must define
    the elements <tag>description</tag>,
    <tag>preferences</tag>, <tag>repository</tag> and
    <tag>packages</tag> (at least one of
    <tag class="attribute">type</tag>="<tag class="attvalue">bootstrap</tag>").
   </para>
  </section>

  <section xml:id="sec.description.description">
   <title><tag>description</tag> Element</title>
<screen>&lt;description type="system"&gt;
  &lt;author&gt;an author&lt;/author&gt;
  &lt;contact&gt;mail&lt;/contact&gt;
  &lt;specification&gt;short info&lt;/specification&gt;
&lt;/description&gt;</screen>
   <para>
    The mandatory <tag>description</tag> section contains
    information about the creator of this image description. The attribute
    <tag class="attribute">type</tag> could be either of
    the value system which indicates this is a system image description or
    at value boot for boot image descriptions.
   </para>
  </section>

  <section xml:id="sec.description.profiles">
   <title><tag>profiles</tag> Element</title>
<screen>&lt;profiles&gt;
   &lt;profile name="name" description="text"/&gt;
   ...
&lt;/profiles&gt;</screen>
   <para>
    The optional <tag>profiles</tag> section lets you maintain one
    image description while allowing for variation of the sections packages
    and drivers that are included. A separate profile element must be
    specified for each variation. The <tag>profile</tag> child
    element, which has <tag class="attribute">name</tag>
    and <tag class="attribute">description</tag>
    attributes, specifies an alias name used to mark sections as belonging
    to a profile, and a short description explaining what this profile does.
   </para>
   <para>
    To mark a set of packages/drivers as belonging to a profile, simply
    annotate them with the
    <tag class="attribute">profiles</tag> attribute. It
    is also possible to mark sections as belonging to multiple profiles by
    separating the names in the
    <tag class="attribute">profiles</tag> attribute with a comma. If
    a <tag>packages</tag> or <tag>drivers</tag> tag does not
    have a <tag class="attribute">profiles</tag>
    attribute, it is assumed to be present for all profiles.
   </para>
  </section>

  <section xml:id="sec.description.preferences">
   <title><tag>preferences</tag> Element</title>
<screen>&lt;preferences profiles="name"&gt;
  &lt;version&gt;1.1.2&lt;/version&gt;
  &lt;packagemanager&gt;zypper&lt;/packagemanager&gt;
  &lt;type image="name" ...&gt;
    &lt;machine|oemconfig|pxedeploy|size|split|systemdisk|vagrantconfig&gt;
  &lt;/type&gt;
&lt;/preferences&gt;</screen>
   <para>
    The mandatory <tag>preferences</tag> section contains
    information about the supported image type(s), the used package manager,
    the version of this image, and optional attributes. The image version
    must be a three-part version number of the format:
    <emphasis role="bold">Major</emphasis>.<emphasis role="bold">Minor</emphasis>.<emphasis role="bold">Release</emphasis>.
    In case of changes to the image description the following
    rules should apply:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      For smaller image modifications that do not add or remove any new
      packages, only the release number is incremented. The
      <filename>config.xml</filename> file remains unchanged.
     </para>
    </listitem>
    <listitem>
     <para>
      For image changes that involve the addition or removal of packages the
      minor number is incremented and the release number is reset.
     </para>
    </listitem>
    <listitem>
     <para>
      For image changes that change the size of the image file the major
      number is incremented.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    By default, KIWI uses the <command>zypper</command> package manager but
    it is also possible to use the non SUSE native package manager called
    <command>smart</command>.
   </para>
   <para>
    In general the specification of one <tag>preferences</tag>
    section is sufficient. However, it’s possible to specify multiple
    <tag>preferences</tag> sections and distinguish between the
    sections via the <tag class="attribute">profiles</tag>
    attribute. Data may also be shared between different profiles. Using
    profiles it is possible to, for example, configure specific preferences
    for OEM image generation. Activation of a given
    <tag>preferences</tag> during image generation is triggered by
    the use of the <option>--add-profile</option> command line argument.
   </para>
   <para>
    For each <tag>preferences</tag> block at least one
    <tag>type</tag> element must be defined. It is possible to
    specify multiple <tag>type</tag> elements in any
    <tag>preferences</tag> block. To set a given
    <tag>type</tag> description as the default image use the boolean
    attribute <tag class="attribute">primary</tag> and
    set its value to <tag class="attvalue">true</tag>. The
    image type to be created is determined by the value of the
    <tag class="attribute">image</tag> attribute. The
    following list describes the supported types and possible values of the
    image attribute:
   </para>
   <variablelist>
    <varlistentry>
     <term><tag class="attribute">image</tag>="<tag class="attvalue">lxc|docker</tag>"</term>
     <listitem>
      <para>
       Use the lxc or docker image type to build a linux container image. For
       additional information refer to the <xref linkend="chap.docker"/>
       chapter.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">image</tag>="<tag class="attvalue">[filesystem]</tag>"</term>
     <listitem>
      <para>
       Use one of the following image types to build a plain filesystem
       image. This will create a file containing the data in the specified
       filesystem and you can loop mount the image to view the contents e.g
       image="ext3":
      </para>
      <itemizedlist>
       <listitem>
        <para>
         ext2
        </para>
       </listitem>
       <listitem>
        <para>
         ext3
        </para>
       </listitem>
       <listitem>
        <para>
         ext4
        </para>
       </listitem>
       <listitem>
        <para>
         btrfs
        </para>
       </listitem>
       <listitem>
        <para>
         squashfs
        </para>
       </listitem>
       <listitem>
        <para>
         xfs
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">image</tag>="<tag class="attvalue">tbz</tag>"</term>
     <listitem>
      <para>
       Use the tbz image type to just pack the unpacked image tree into a
       tarball.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">image</tag>="<tag class="attvalue">cpio</tag>"</term>
     <listitem>
      <para>
       Use the cpio image type to specify the generation of a boot image
       (initrd). When generating a boot image, it is possible to specify a
       specific boot profile and boot kernel using the optional
       <tag class="attribute">bootprofile</tag>="<tag class="attvalue">default</tag>"
       and
       <tag class="attribute">bootkernel</tag>="<tag class="attvalue">std</tag>"
       attributes.
      </para>
      <para>
       A boot image should group the various supported kernels into
       profiles. If the user chooses not to use the profiles supplied by
       KIWI, it is required that one profile named std be created. This
       profile will be used if no other bootkernel is specified. Further it
       is required to create a profile named default. This profile is used
       when no bootprofile is specified.
      </para>
      <para>
       It is recommended that special configurations that omit drivers, use
       special drivers and/or special packages be specified as profiles.
      </para>
      <para>
       The bootprofile and bootkernel attribute are respected within the
       definition of a system image. Us the attribute and value
       <tag class="attribute">type</tag>="<tag class="attvalue">system</tag>"
       of the <tag>description</tag> element to specify the creation
       of a system image. The values of the bootprofile and bootkernel
       attributes are used by KIWI when generating the boot image.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">image</tag>="<tag class="attvalue">iso</tag>"</term>
     <listitem>
      <para>
       Specify the key-value pair
       <tag class="attribute">image</tag>="<tag class="attvalue">iso</tag>"
       to generate a live system suitable for deployment on optical media
       (CD or DVD). Use the
       <tag class="attribute">boot</tag>="<tag class="attvalue">isoboot/suse-*</tag>"
       attribute when generating this image type to select the appropriate
       boot image for optical media. In addition the optional
       <tag class="attribute">flags</tag> attribute may be set to
       the following values with the effects described below:
      </para>
      <variablelist>
       <varlistentry>
        <term><tag class="attvalue">seed</tag>
        </term>
        <listitem>
         <para>
          Creates a btrfs based compressed read-only filesystem which allows
          write operations into a btrfs seed device.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="attvalue">overlay</tag>
        </term>
        <listitem>
         <para>
          Creates a squashfs based compressed read-only filesystem which is
          combined with a write space via the overlayfs filesystem.
          overlayfs is part of the kernel since version 3.7
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="attvalue">compressed</tag>
        </term>
        <listitem>
         <para>
          Creates a split ext3 plus squashfs filesystem and combines them
          via a symlink system to a complete system it is recommended to
          specify a <tag>split</tag> section as a child of this type
          element.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
      <para>
       If the flags attribute is not used the filesystem will be squashfs
       compressed for /bin /boot /lib /lib64 /opt /sbin and /usr. The rest
       of the filesystem is packed into a tmpfs and linked via symbolic
       links
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">image</tag>="<tag class="attvalue">oem</tag>"</term>
     <listitem>
      <para>
       Use this type to create a virtual disk system suitable in a preload
       setting. In addition specify the attributes
       <tag class="attribute">filesystem</tag>, and
       <tag class="attribute">boot</tag>="<tag class="attvalue">oemboot/suse-*</tag>"
       to control the filesystem used for the virtual and to specify the
       proper boot image. Using the optional
       <tag class="attribute">format</tag> attribute
       and setting, the value to iso or usb will create self installing
       images suitable for optical media or a USB stick, respectively.
       Booting from the media will deploy the OEM preload image onto the
       selected storage device of the system. It is also possible to
       configure the system to use logical volumes. Use the optional
       <tag class="attribute">lvm</tag> attribute
       and specify the logical volume configuration with the
       <tag>systemdisk</tag> child element. The default volume group
       name is kiwiVG. Further configuration of the image is performed using
       the appropriate <tag>*config</tag> child block.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">image</tag>="<tag class="attvalue">pxe</tag>"</term>
     <listitem>
      <para>
       Creating a network boot image is supported by KIWI with the
       image="pxe" type. When specifying the creation of a network boot
       image use the
       <tag class="attribute">filesystem</tag> and
       boot="netboot/suse-*" attributes to specify the filesystem of the
       image and the proper boot image. To compress the image file set the
       <tag class="attribute">compressed</tag> boolean attribute to
       true. This setting will compress the image file and has no influence
       on the filesystem used within the image. The compression is often use
       to support better transfer times when the pxe image is pushed to the
       boot server over a network connection. The pxe image layout is
       controlled by using the <tag>pxedeploy</tag> child element.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">image</tag>="<tag class="attvalue">split</tag>"</term>
     <listitem>
      <para>
       The split image support allows the creation of an image as split
       files. Using this technique one can assign different file systems and
       different read-write properties to the different sections of the
       image. The <tag>oem</tag>, <tag>pxe</tag>,
       <tag>usb</tag>, and <tag>vmx</tag> types can be
       created as a split system image. Use the
       <tag class="attribute">boot</tag>="<tag class="attvalue">oem|netboot|usb|vmx/suse-*</tag>"
       attribute to select the underlying type of the split image. The
       attributes
       <tag class="attribute">fsreadwrite</tag>,
       <tag class="attribute">fsreadonly</tag> are
       used to control the read-write properties of the filesystem specified
       as the attributes value. Use the appropriate
       <tag>*config</tag> child block to specify the properties of
       the underlying image. For example when building a OEM based split
       image use the <tag>oemconfig</tag> child section.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">image</tag>="<tag class="attvalue">vmx</tag>"</term>
     <listitem>
      <para>
       Creation of a virtual disk system is enabled with the vmx value of
       the image attribute. Set the filesystem of the virtual disk with the
       filesystem attribute and select the appropriate boot image by setting
       <tag class="attribute">boot</tag>="<tag class="attvalue">vmxboot/suse-*</tag>"
       The optional format attribute is used to specify one of the
       virtualization formats supported by QEMU, such as vmdk (also the
       VMware format) or qcow2. For the virtual disk image the optional vga
       attribute may be used to configure the kernel framebuffer device.
       Acceptable values can be found in the Linux kernel documentation for
       the framebuffer device (see
       <filename>Documentation/fb/vesafb.txt</filename>). KIWI also supports
       the selection of the boot loader for the virtual disk according to the
       rules indicated for the USB system. Last but not least the virtual
       disk system may also be created with a LVM based layout by using the
       <tag class="attribute">lvm</tag> attribute. The previously
       indicated rules apply. Use the <tag>machine</tag> child
       element to specify appropriate configuration of the virtual disk
       system.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    Within the type section, there could be other optional attributes which
    are either universally valid or can be used for different image types in
    the same way. The following list explains these attributes:
   </para>
   <variablelist>
    <varlistentry>
     <term><tag class="attribute">kernelcmdline</tag>
     </term>
     <listitem>
      <para>
       Specifies additional kernel parameters. The following example
       disables kernel messages: <literal>kernelcmdline="quiet"</literal>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">mdraid</tag>
     </term>
     <listitem>
      <para>
       For disk based image types, aka oem and vmx, mdraid activates the
       creation of a software raid image. The raid inside the image is
       created in degraded mode because at creation time we only know about
       one disk. It's in the hand of the user to add devices to the raid
       after the image runs on the target machine. The value for mdraid can
       be either <emphasis>mirroring</emphasis> or
       <emphasis>striping</emphasis>, which means the raid level is set to
       RAID1 (mirroring) or RAID0 (striping).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    Within the preferences section, there are the following optional
    elements:
   </para>
   <variablelist>
    <varlistentry>
     <term><tag class="attribute">showlicense</tag>
     </term>
     <listitem>
      <para>
       Specifies the base name of a license file which is displayed in oem
       images before the installation happens. It's possible to add more
       showlicense sections to display more licenses one after the other. If
       no such element is specified the default 'license' and 'EULA' files
       are searched. The search algorithm will append the .txt or
       .locale.txt suffix to the license name to form the license file name.
       You should make sure that you license files contains this suffix.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">rpm-check-signatures</tag>
     </term>
     <listitem>
      <para>
       Specifies whether RPM should check the package signature or not
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">rpm-excludedocs</tag>
     </term>
     <listitem>
      <para>
       Specifies whether RPM should skip installing package documentation
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">rpm-force</tag>
     </term>
     <listitem>
      <para>
       Specifies whether RPM should be called with <option>--force</option>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">keytable</tag>
     </term>
     <listitem>
      <para>
       Specifies the name of the console keymap to use. The value
       corresponds to a map file in
       <filename>/usr/share/kbd/keymaps</filename>. The
       <varname>KEYTABLE</varname> variable in
       <filename>/etc/sysconfig/keyboard</filename> file is set according to
       the keyboard mapping.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">timezone</tag>
     </term>
     <listitem>
      <para>
       Specifies the time zone. Available time zones are located in the
       <filename class="directory">/usr/share/zoneinfo</filename>
       directory. Specify the attribute value relative to
       <filename class="directory">/usr/share/zoneinfo</filename>.
       For example, specify Europe/Berlin for
       <filename>/usr/share/zoneinfo/Europe/Berlin</filename>. KIWI uses
       this value to configure the timezone in
       <filename>/etc/localtime</filename> for the image.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">locale</tag>
     </term>
     <listitem>
      <para>
       Specifies the name of the UTF-8 locale to use, which defines the
       contents of the <envar>RC_LANG</envar> system environment variable in
       <filename>/etc/sysconfig/language</filename>. Please note only UTF-8
       locales are supported here which also means that the encoding must
       <emphasis>not</emphasis> be part of the locale information. The KIWI
       schema validates the locale string according to the following
       pattern:<literal>[a-z]{2}_[A-Z]{2}(,[a-z]{2}_[A-Z]{2})*</literal>.
       This means you need to specify the locale like the following example:
       en_US or en_US,de_DE
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">bootsplash-theme</tag>
     </term>
     <listitem>
      <para>
       Specifies the name of the bootsplash theme to use
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">bootloader-theme</tag>
     </term>
     <listitem>
      <para>
       Specifies the name of the gfxboot theme to use
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">defaultdestination</tag>
     </term>
     <listitem>
      <para>
       Used if the <option>--destdir</option> option is not specified when
       calling KIWI
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">defaultroot</tag>
     </term>
     <listitem>
      <para>
       Used if the option <option>--root</option> is not specified when
       calling KIWI
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    The <tag>type</tag> element may contain child elements to
    provide specific configuration information for the given type. The
    following lists the supported child elements:
   </para>
   <variablelist>
    <varlistentry>
     <term><tag>systemdisk</tag>
     </term>
     <listitem>
      <para>
       Using the optional systemdisk section it is possible to create a LVM
       (Logical Volume Management) based storage layout or a btrfs based
       layout using sub volumes. See chapter 17 for details.
      </para>
      <para>
       By default, the
       volume group is named <emphasis>kiwiVG</emphasis>. It is possible to
       change the name of the group by setting the
       <tag class="attribute">name</tag> attribute to the desired
       name. Individual volumes within the volume group are specified using
       the <tag class="element">volume</tag> element.
      </para>
      <para>
       The following example shows the creation of a volume named
       <emphasis role="italic">usr</emphasis> and a volume named
       <emphasis role="italic">var</emphasis> inside the volume group
       systemVG.
      </para>
<screen> &lt;systemdisk name="systemVG"&gt;
  &lt;volume name="usr" freespace="100M"/&gt;
  &lt;volume name="var" size="200M"/&gt;
&lt;/systemdisk&gt;</screen>
      <para>
       The optional attribute <tag class="attribute">freespace</tag>
       controls the amount of unused space available after software has been
       installed in the given volume. By default the available space of a
       created volume is between 10% and 20%. Using the optional
       <tag class="attribute">size</tag> attribute the absolute size
       of the given volume is specified. The
       <tag class="attribute">size</tag> attribute takes precedence
       over the <tag class="attribute">freespace</tag> attribute. If
       the specified size is insufficient, based on the estimated software
       install size for the given volume, the specified value will be
       ignored and a volume with default settings will be created. This
       implies that the volume will be 80% to 90% full.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag>oemconfig</tag>
     </term>
     <listitem>
      <para>

       <remark condition="clarity">
        2015-11-30 - fs: This whole section has also been copied to the OEM chapter
       </remark>

       By default, the oemboot process will create or modify a swap, and
       <filename>/</filename> partition. It is possible to influence the
       behavior by the <filename>oem-*</filename> elements explained below.
      </para>
<screen>&lt;oemconfig&gt;
   &lt;oem-systemsize&gt;2000&lt;/oem-systemsize&gt;
   &lt;oem-... &gt;
&lt;/oemconfig&gt;</screen>
      <variablelist>
       <varlistentry>
        <term><tag class="starttag">oem-boot-title</tag>text<tag class="endtag">oem-boot-title</tag>
        </term>
        <listitem>
         <para>
          By default, the string
          <phrase>OEM</phrase> will be
          used as the boot manager menu entry when KIWI creates the GRUB
          configuration during deployment. The
          <tag>oem-boot-title</tag> element allows you to set a
          custom name for the grub menu entry. This value is represented by
          the <varname>kiwi_oemtitle</varname> variable in the initrd
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="starttag">oem-bootwait</tag>true|false<tag class="endtag">oem-bootwait</tag>
        </term>
        <listitem>
         <para>
          Specify if the system should wait for user interaction prior to
          continuing the boot process after the oem image has been dumped to
          the designated storage device (default value is false). This value
          is represented by the <varname>kiwi_oembootwait</varname> variable
          in the initrd
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="starttag">oem-inplace-recovery</tag>true|false<tag class="endtag">oem-inplace-recovery</tag>
        </term>
        <listitem>
         <para>
          Specify if the recovery archive is stored as part of the image or
          if the archive is to be created at the time the image is deployed
          to the target storage device.
          <varname>kiwi_oemrecoveryInPlace</varname> variable in the initrd
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="starttag">oem-kiwi-initrd</tag>true|false<tag class="endtag">oem-kiwi-initrd</tag>
        </term>
        <listitem>
         <para>
          If this element is set to true (default value is false) the
          oemboot boot image (initrd) will <emphasis>not</emphasis> be
          replaced by the system (mkinitrd) created initrd. This option is
          useful when the system is installed on removable storage such as a
          USB stick or a portable external drive. For movable devices it is
          potentially necessary to detect the storage location during every
          boot. This detection process is part of the oemboot boot image.
          This value is represented by the <varname>kiwi_oemkboot</varname>
          variable in the initrd
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="starttag">oem-partition-install</tag>true|false<tag class="endtag">oem-partition-install</tag>
        </term>
        <listitem>
         <para>
          Specify if the image is to be installed into a free partition on
          the target storage device. By default the value is false and Kiwi
          installs images to a target device which causes data loss on the
          device. With
          <tag class="element">oem-partition-install</tag> set to
          true any other settings that have influence on the partition
          table, such as <tag class="element">oem-swap</tag> are
          ignored. This value is represented by the
          <varname>kiwi_oempartition_install</varname> variable in the
          initrd
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="starttag">oem-reboot</tag>true|false<tag class="endtag">oem-reboot</tag>
        </term>
        <listitem>
         <para>
          Specify if the system is to be rebooted after the oem image has
          been deployed to the designated storage device (default value is
          false). This value is represented by the
          <varname>kiwi_oemreboot</varname> variable in the initrd
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="starttag">oem-reboot-interactive</tag>true|false<tag class="endtag">oem-reboot-interactive</tag>
        </term>
        <listitem>
         <para>
          Specify if the system is to be rebooted after the oem image has
          been deployed to the designated storage device (default value is
          false). Prior to reboot a message is posted and must be
          acknowledged by the user in order for the system to reboot. This
          value is represented by the
          <varname>kiwi_oemrebootinteractive</varname> variable in the
          initrd
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="starttag">oem-recovery</tag>true|false<tag class="endtag">oem-recovery</tag>
        </term>
        <listitem>
         <para>
          If this element is set to true (default value is false), KIWI will
          create a recovery archive from the prepared root tree. The archive
          will appear as <filename>/recovery.tar.bz2</filename> in the image
          file. During first boot of the image a single recovery partition
          will be created and the recovery archive will be moved to the
          recovery partition. An additional boot menu entry is created that
          when selected restores the original root tree on the system. The
          user information on the
          <filename class="directory">/home</filename>
          partition or in the <filename class="directory">/home</filename>
          directory is not affected by the recovery process. This value is
          represented by the kiwi_oemrecovery variable in the initrd
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="starttag">oem-recoveryID</tag>partition-id<tag class="endtag">oem-recoveryID</tag>
        </term>
        <listitem>
         <para>
          Specify the partition type for the recovery partition. The default
          is to create a Linux partition (id = 83). This value is
          represented by the <varname>kiwi_oemrecoveryID</varname> variable
          in the initrd
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="starttag">oem-silent-boot</tag>true|false<tag class="endtag">oem-silent-boot</tag>
        </term>
        <listitem>
         <para>
          Specify if the system should boot in silent mode after the oem
          image has been deployed to the designated storage device (default
          value is false). This value is represented by the
          <varname>kiwi_oemsilentboot</varname> variable in the initrd
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="starttag">oem-shutdown</tag>true|false<tag class="endtag">oem-shutdown</tag>
        </term>
        <listitem>
         <para>
          Specify if the system is to be powered down after the oem image
          has been deployed to the designated storage device (default value
          is false). This value is represented by the
          <varname>kiwi_oemshutdown</varname> variable in the initrd
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="starttag">oem-shutdown-interactive</tag>true|false<tag class="endtag">oem-shutdown-interactive</tag>
        </term>
        <listitem>
         <para>
          Specify if the system is to be powered down after the oem image
          has been deployed to the designated storage device (default value
          is false). Prior to shutdown a message is posted and must be
          acknowledged by the user in order for the system to power off.
          This value is represented by the
          <varname>kiwi_oemshutdowninteractive</varname> variable in the
          initrd
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="starttag">oem-swap</tag>true|false<tag class="endtag">oem-swap</tag>
        </term>
        <listitem>
         <para>
          Specify if a swap partition should be created. The creation of a
          swap partition is the default behavior. This value is represented
          by the <varname>kiwi_oemswap</varname> variable in the initrd
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="starttag">oem-swapsize</tag>number in MB<tag class="endtag">oem-swapsize</tag>
        </term>
        <listitem>
         <para>
          Set the size of the swap partition. If a swap partition is to be
          created and the size of the swap partition is not specified with
          this optional element, KIWI will calculate the size of the swap
          partition and create a swap partition equal to two times the RAM
          installed on the system at initial boot time. This value is
          represented by the <varname>kiwi_oemswapMB</varname> variable in
          the initrd
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="starttag">oem-systemsize</tag>number in MB<tag class="endtag">oem-systemsize</tag>
        </term>
        <listitem>
         <para>
          Set the size the operating system is allowed to consume on the
          target disk. The size limit does not include any consideration for
          swap space or a recovery partition. In a setup
          <emphasis>without</emphasis> a
          <tag class="element">systemdisk</tag> element this value
          specifies the size of the root partition. In a setup
          <emphasis>including</emphasis> a
          <tag class="element">systemdisk</tag> element this value
          specifies the size of the LVM partition which contains all
          specified volumes. Thus, the sum of all specified volume sizes
          plus the sum of the specified freespace for each volume must be
          smaller or equal to the size specified with the
          <tag class="element">oem-systemsize</tag>. This value is
          represented by the variable <varname>kiwi_oemrootMB</varname> in
          the initrd
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="starttag">oem-unattended</tag>true|false<tag class="endtag">oem-unattended</tag>
        </term>
        <listitem>
         <para>
          The installation of the image to the target system occurs
          automatically without requiring user interaction. If multiple
          possible target devices are discovered the image is deployed to
          the first device. <varname>kiwi_oemunattended</varname> in the
          initrd
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag>pxedeploy</tag>
     </term>
     <listitem>
      <para>
       Information contained in the optional <tag>pxedeploy</tag>
       section is only considered if the
       <tag class="attribute">image</tag> attribute of the
       <tag>type</tag> element is set to
       <tag class="attvalue">pxe</tag>. To use a PXE image
       it is necessary to create a network boot infrastructure. Creation of
       the network boot infrastructure is simplified by the KIWI provided
       package
       <package>kiwi-pxeboot</package>
       . This package configures the basic PXE boot environment as expected
       by KIWI pxe images. The
       <package>kiwi-pxeboot</package>
       package creates a directory structure in
       <filename>/srv/tftpboot</filename>. Files created by the KIWI create
       step need to be copied to the <filename>/srv/tftpboot</filename>
       directory structure. For additional details about the PXE image
       please refer to the PXE Image chapter later in this document.
      </para>
      <para>
       In addition to the image files it is necessary that information be
       provided about the client setup. This information, such as the image
       to be used or the partitioning, is contained in a file with the name
       <filename>config.<replaceable>MAC</replaceable></filename> in the
       directory <filename>/srv/tftpboot/KIWI</filename>. The content of
       this file is created automatically by KIWI if the pxedeploy section
       is provided in the image description. A pxedeploy section is outlined
       below:
      </para>
<screen>&lt;pxedeploy server="IP" blocksize="4096"&gt;
   &lt;timeout&gt;seconds&lt;/timeout&gt;
   &lt;kernel&gt;kernel-file&lt;/kernel&gt;
   &lt;initrd&gt;initrd-file&lt;/initrd&gt;
   &lt;partitions device="/dev/sda"&gt;
     &lt;partition type="swap" number="1" size="MB"/&gt;
     &lt;partition type="L" number="2" size="MB"
              mountpoint="/" target="true"/&gt;
     &lt;partition type="fd"  number="3"/&gt;
   &lt;/partitions&gt;
   &lt;union ro="dev" rw="dev" type="clicfs"/&gt;
   &lt;configuration source="/KIWI/../file" dest="/../file" arch="..."/&gt;
   &lt;configuration .../&gt;
&lt;/pxedeploy&gt; </screen>
      <itemizedlist>
       <listitem>
        <para>
         The <tag class="attribute">server</tag> attribute is used
         to specify the IP address of the PXE server. The
         <tag class="attribute">blocksize</tag>
         attributes specifies the blocksize for the image download. Other
         protocols are supported by KIWI but require the
         <parameter>kiwiserver</parameter> and
         <parameter>kiwiservertype</parameter> kernel parameters to be set
         when the client boots.
        </para>
       </listitem>
       <listitem>
        <para>
         The value of the optional <tag>timeout</tag> element
         specifies the grub timeout in seconds to be used when the KIWI
         initrd configures and installs the grub boot loader on the client
         machine after the first deployment to allow standalone boot.
        </para>
       </listitem>
       <listitem>
        <para>
         Passing kernel parameters is possible with the use of the optional
         <tag class="attribute">kernelcmdline</tag>
         attribute in the <tag>type</tag> section. The value of this
         attribute is a string specifying the settings to be passed to the
         kernel by the GRUB bootloader. The KIWI initrd includes these
         kernel options when installing grub for standalone boot
        </para>
       </listitem>
       <listitem>
        <para>
         The optional <tag>kernel</tag> and
         <tag>initrd</tag> elements are used to specify the file
         names for the kernel and initrd on the boot server respectively.
         When using a special boot method not supported by the
         distribution’s standard mkinitrd, it is imperative that the KIWI
         initrd remains on the PXE server and also be used for local boot.
         If the configured image uses the <tag>split</tag> type or
         the <tag>pxedeploy</tag> section includes any union
         information the kernel and initrd elements must be used.
        </para>
       </listitem>
       <listitem>
        <para>
         The <tag>partitions</tag> section is required if the system
         image is to be installed on a disk or other permanent storage
         device. Each partition is specified with one partition child
         element. The mandatory type attribute specifies the partition type
         id.
        </para>
        <para>
         The required
         <tag class="attribute">number</tag>
         attribute provides the number of the partition to be created. The
         size of the partition may be specified with the optional size
         attribute. The optional mountpoint attribute provides the value for
         the mount point of the partition. The optional boolean target
         attribute identifies the partition as the system image target
         partition. KIWI always generates the swap partition as the first
         partition of the netboot boot image. By default, the second
         partition is used for the system image. Use the boolean
         <tag class="attribute">target</tag> attribute to change
         this behavior. Providing the value image for the
         <tag class="attribute">size</tag>
         attribute triggers KIWI into calculating the required size for this
         partition. The calculated size is sufficient for the created image.
        </para>
       </listitem>
       <listitem>
        <para>
         If the system image is based on a read-only filesystem such as
         squashfs and should be mounted in read-write mode use the optional
         union element. The type attribute is used to specify one of the
         supported overlay filesystem
         <systemitem class="filesystem">clicfs</systemitem> Use the ro
         attribute to point to the read only device and the rw attribute to
         point to the read-write device.
        </para>
       </listitem>
       <listitem>
        <para>
         The optional <tag>configuration</tag> element is used to
         integrate a network client’s configuration files that are stored
         on the server. The source attribute specifies the path on the
         server for the file to be downloaded. The dest attribute specifies
         destination of the downloaded file on the network client starting
         at the root (/) of the filesystem. Multiple configuration elements
         may be specified such that multiple files can be transferred to the
         network client. In addition configuration files can be bound to a
         specific client architecture by setting the optional arch
         attribute. To specify multiple architectures use a comma separated
         string.
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag>size</tag>
     </term>
     <listitem>
      <para>
       Use the size element to specify the image size in Megabytes or
       Gigabytes. The unit attribute specifies whether the given value will
       be interpreted as Megabytes
       (<tag class="attribute">unit</tag>="<tag class="attvalue">M</tag>")
       or Gigabytes
       (<tag class="attribute">unit</tag>="<tag class="attvalue">G</tag>").
       The optional boolean attribute additive specifies whether or not the
       given size should be added to the size of the generated image or not.
      </para>
      <para>
       In the event of a size specification that is too small for the
       generated image, KIWI will expand the size automatically unless the
       image size exceeds the specified size by 100 MB or more. In this
       case KIWI will generate an error and exit.
      </para>
      <para>
       Should the given size exceed the necessary size for the image KIWI
       will not alter the image size as the free space might be required for
       proper execution of components within the image.
      </para>
      <para>
       If the size element is not used, KIWI will create an image containing
       approximately 30 % free space.
      </para>
<screen>&lt;size unit="M"&gt;1000&lt;/size&gt;</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag>split</tag>
     </term>
     <listitem>
      <para>
       For images of type split or iso the information provided in the
       optional <tag>split</tag> section is considered if the
       compressed attribute is set to true. With the configuration in this
       block it is possible to determine which files are writable and
       whether these files should be persistently writable or temporarily.
       Note that for ISO images only temporary write access is possible.
      </para>
      <para>
       When processing the provided configuration KIWI distinguishes between
       directories and files. For example, providing
       <filename class="directory">/etc</filename> as the value of the name
       attribute indicates that the
       <filename class="directory">/etc</filename> directory should be
       writable. However, this does not include any of the files or
       sub-directories within
       <filename class="directory">/etc</filename>. The
       content of /etc is populated as symbolic links to the read-only
       files. The advantage of setting only a directory to read-write access
       is that any newly created files will be stored on the disk instead of
       in
       <systemitem class="filesystem">tmpfs</systemitem>.
       Creating read-write access to a directory and it’s files requires
       two specifications as shown below.
      </para>
<screen>&lt;split&gt;
  &lt;temporary&gt;
    read/write access to
    &lt;file name="/var"/&gt;
    &lt;file name="/var/*"/&gt;
    but not on this file:
    &lt;except name="/etc/shadow"/&gt;
  &lt;/temporary&gt;
  &lt;persistent&gt;
    persistent read/write access to:
    &lt;file name="/etc"/&gt;
    &lt;file name="/etc/*"/&gt;
    but not on this file:
    &lt;except name="/etc/passwd"/&gt;
  &lt;/persistent&gt;
&lt;/split&gt;</screen>
      <para>
       Use the except element to specify exceptions to previously configured
       rules.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag>machine</tag>
     </term>
     <listitem>
      <para>
       The optional machine section serves to specify information about a VM
       guest machine. Using the data provided in this section, KIWI will
       create a guest configuration file required to run the image on the
       target machine.
      </para>
      <para>
       If the target is a VMware virtual machine indicated by the format
       attribute set to vmdk, KIWI creates a VMware configuration file. If
       the target is a Xen virtual machine indicated by the domain attribute
       in the machine section KIWI will create a Xen guest config file.
      </para>
      <para>
       The sample block below shows the general outline of the information
       that can be specified to generate the configuration file
      </para>
<screen>&lt;machine arch="arch" memory="MB"
  HWversion="number" guestOS="suse|sles"
  domain="dom0|domU"/&gt;
   &lt;vmconfig-entry&gt;Entry_for_VM_config_file&lt;\vmconfig-entry&gt;
   &lt;vmconfig-entry .../&gt;
   &lt;vmnic driver="name" interface="number" mode="mode"/&gt;
   &lt;vmnic ...&gt;
   &lt;vmdisk controller="ide|scsi" id="number"/&gt;
   &lt;vmdvd  controller="ide|scsi" id="number"/&gt;
&lt;/machine&gt; </screen>
      <variablelist>
       <varlistentry>
        <term><tag class="attribute">arch</tag>
        </term>
        <listitem>
         <para>
          The virtualized architecture. Supported values are
          <tag class="attvalue">ix86</tag> or
          <tag class="attvalue">x86_64</tag>. The default value is
          <tag class="attvalue">ix86</tag>.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="attribute">memory</tag>
        </term>
        <listitem>
         <para>
          The mandatory
          <tag class="attribute">memory</tag>
          attribute specifies how much memory in MB should be allocated for
          the virtual machine
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="attribute">HWversion</tag>
        </term>
        <listitem>
         <para>
          The VMware hardware version number, the default value is
          <tag class="attvalue">3</tag>.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="attribute">guestOS</tag>
        </term>
        <listitem>
         <para>
          The guest OS identifier. For the ix86 architecture the default
          value is suse and for the x86_64 architecture suse-64 is the
          default. At this point only the SUSE and SLES guestOS types are
          supported.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="attribute">domain</tag>
        </term>
        <listitem>
         <para>
          The Xen domain setup. This could be either a dom0 which is the
          host machine hosting the guests and therefore doesn’t require a
          configuration file, or it could be set to domU which indicates
          this is a guest and also requires a guest configuration which is
          created by KIWI.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
      <para>
       Use the <tag class="element">vmconfig-entry</tag> element to
       create entries in the virtual machine's configuration file; .vmx for
       VMware images and .xenconfig for Xen images. You may specify as many
       configuration options as desired. The value of the
       <tag class="element">vmconfig-entry</tag> element is expected
       to be specified in the syntax required by the VM configuration file
       to be written. The value is free format text and is not validated by
       Kiwi in any way. The entry is written to the VM configuration file
       verbatim.
      </para>
      <para>
       Use the <tag class="element">vmdisk</tag> element to setup
       the virtual main storage device.
      </para>
      <variablelist>
       <varlistentry>
        <term><tag class="attribute">controller</tag>
        </term>
        <listitem>
         <para>
          Supported values for the mandatory
          <tag class="attribute">controller</tag>
          attribute are <tag class="attvalue">ide</tag> and
          <tag class="attvalue">scsi</tag>.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="attribute">id</tag>
        </term>
        <listitem>
         <para>
          The mandatory
          <tag class="attribute">id</tag>
          attribute specifies the disk id. If only one disk is set the id
          value should be set to 0.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="attribute">device</tag>
        </term>
        <listitem>
         <para>
          The device attribute specifies the disk that should appear in the
          para virtual instance. Therefore only relevant for Xen
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
      <para>
       Use the <tag class="element">vmdvd</tag> element to setup a
       virtual optical drive (CD/DVD) connection
      </para>
      <variablelist>
       <varlistentry>
        <term><tag class="attribute">controller</tag>
        </term>
        <listitem>
         <para>
          Supported values for the mandatory
          <tag class="attribute">controller</tag>
          attribute are <tag class="attvalue">ide</tag> and
          <tag class="attvalue">scsi</tag>.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="attribute">id</tag>
        </term>
        <listitem>
         <para>
          The mandatory
          <tag class="attribute">id</tag>
          attribute specifies the disk id. If only one disk is set the id
          value should be set to 0.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
      <para>
       Use the <tag class="element">vmnic</tag> element to setup the
       virtual network interface. Multiple
       <tag class="element">vmnic</tag> child elements may be
       specified to setup multiple virtual network interfaces.
      </para>
      <variablelist>
       <varlistentry>
        <term><tag class="attribute">driver</tag>
        </term>
        <listitem>
         <para>
          The mandatory
          <tag class="attribute">driver</tag>
          attribute specifies the driver to be used for the virtual network
          card. The supported values are
          <tag class="attvalue">e100</tag>,
          <tag class="attvalue">vlance</tag>,
          and
          <tag class="attvalue">vmxnet</tag>.
          If the vmxnet driver is specified the vmware tools must be
          installed in the image.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="attribute">interface</tag>
        </term>
        <listitem>
         <para>
          The mandatory
          <tag class="attribute">interface</tag>
          attribute specifies the interface number. If only one interface is
          set the value should be set to 0.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><tag class="attribute">mode</tag>
        </term>
        <listitem>
         <para>
          The network mode used to communicate outside the VM. In many cases
          the bridged mode is used.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>

  <section xml:id="sec.description.users">
   <title><tag>users</tag> Element</title>
<screen>&lt;users group="group_name" id="number"&gt;
  &lt;user home="dir" id="number" name="user" password="..."
        pwdformat="encrypted|plain" realname="string" shell="path"/&gt;
  ...
&lt;/users&gt;</screen>
   <para>
    The optional <tag>users</tag> element lists the users belonging
    to the group specified with the
    <tag class="attribute">group</tag> attribute. At least one user
    child element must be specified as part of the <tag>users</tag>
    element. Multiple users elements may be specified.
   </para>
   <para>
    The attributes <tag class="attribute">home</tag>,
    <tag class="attribute">id</tag>,
    <tag class="attribute">name</tag>,
    <tag class="attribute">pwd</tag>,
    <tag class="attribute">realname</tag>, and
    <tag class="attribute">shell</tag> specify the created users
    home directory, the user name, the user’s password, the user’s real
    name, and the user’s login shell, respectively. By default, the value
    of the password attribute is expected to be an encrypted string. An
    encrypted password can be created using <command>kiwi</command>
    <option>--createpassword</option>. It is also possible to specify the
    password as a non encrypted string by using the pwdformat attribute and
    setting it’s value to <quote>plain</quote>. KIWI will then encrypt the
    password prior to the user being added to the system.
   </para>
   <para>
    All specified users and groups will be created if they do not already
    exist. By default, the defined users will be part of the group specified
    with the group attribute of the users element and the default group
    called <quote>users</quote>. If it is desired to have the specified
    users to only be part of the given group it is necessary to specify the
    <tag class="attribute">id</tag> attribute. It is
    recommended to use a group id greater than 100.
   </para>
  </section>

  <section xml:id="sec.description.drivers">
   <title><tag>drivers</tag> Element</title>
<screen>&lt;drivers profiles="name"&gt;
  &lt;file name="filename"/&gt;
  ...
&lt;/drivers&gt;</screen>
   <para>
    The optional <tag>drivers</tag> element is only useful for boot
    images (initrd). As a boot image doesn’t need to contain the complete
    kernel one can save a lot of space if only the required drivers are part
    of the image. Therefore the drivers section exists. If present only the
    drivers which matches the file names or glob patterns will be included
    into the boot image. Each file is specified relative to the
    <filename class="directory">/lib/modules/<replaceable>Version</replaceable>/kernel</filename>
    directory.
   </para>
   <para>
    According to the <tag>driver</tag> element the specified files
    are searched in the corresponding directory. The information about the
    driver names is provided as environment variable named like the value of
    the <tag class="attribute">type</tag> attribute and
    is processed by the function suseStripKernel().
    According to this along with a boot image description a script called
    <command>images.sh</command> must exist which calls this function in
    order to allow the driver information to have any effect.
   </para>
  </section>

  <section xml:id="sec.description.repository">
   <title><tag>repository</tag> Element</title>
<screen>&lt;repository type="type" alias="name" imageinclude="true|false"
              password="password" priority="number" status="replaceable"
              username="user-name"&gt; &lt;source path="URL"/&gt;
&lt;/repository&gt;</screen>
   <para>
    The mandatory <tag class="element">repository</tag> element
    specifies the location and type of a repository to be used by the
    package manager as a package installation source. The mandatory
    <tag class="attribute">type</tag> attribute specifies the
    repository type. A specified repository can only be accessed by the
    chosen package manager if the given type is supported by the specified
    package manager. KIWI supports smart or zypper as package managers,
    specified with the <tag class="element"> packagemanager</tag>
    element. The default package manager is zypper. The following table
    shows the possible supported repository types for each package manager:
   </para>
   <table xml:id="tab.description.supported-types">
    <title>Supported Package Manager Repository Types</title>
    <tgroup cols="5">
     <thead>
      <row>
       <entry>Type</entry>
       <entry>smart</entry>
       <entry>zypper</entry>
       <entry>apt</entry>
       <entry>yum</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>apt-deb</entry>
       <entry>yes</entry>
       <entry>no</entry>
       <entry>yes</entry>
       <entry>no</entry>
      </row>
      <row>
       <entry>rpm-dir</entry>
       <entry>yes</entry>
       <entry>yes</entry>
       <entry>no</entry>
       <entry>no</entry>
      </row>
      <row>
       <entry>rpm-md</entry>
       <entry>yes</entry>
       <entry>yes</entry>
       <entry>no</entry>
       <entry>yes</entry>
      </row>
      <row>
       <entry>yast2</entry>
       <entry>yes</entry>
       <entry>yes</entry>
       <entry>no</entry>
       <entry>no</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>
    The <tag class="element">repository</tag> element has the
    following optional attributes:
   </para>
   <variablelist>
    <varlistentry>
     <term><tag class="attribute">alias</tag>="<tag class="attvalue">name</tag>"</term>
     <listitem>
      <para>
       Specifies an alternative name for the configured repository. If the
       attribute is not specified KIWI will generate an alias name by
       replacing any <quote>/</quote> in the given repository location with
       an <quote>_</quote>. It is helpful to set an alias name if the
       repository path is insufficient in expressing the purpose of the
       contained packages.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">imageinclude</tag>="<tag class="attvalue">true|false</tag>"</term>
     <listitem>
      <para>
       Specifies whether the given repository should be configured as a
       repository in the image or not. The default behavior is that
       repositories used to build an image are not configured as a
       repository inside the image. This feature allows you to change the
       behavior by setting the value to
       <tag class="attvalue">true</tag>. The
       repository is configured in the image according to the source path as
       specified with the <tag class="attribute">path</tag>
       attribute of the <tag class="element">source</tag> element.
       Therefore, if the path is not a fully qualified URL, you may need to
       adjust the repository file in the image to accommodate the expected
       location. It is recommended that you use the
       <tag class="attribute">alias</tag> attribute in combination
       with the <tag class="attribute">imageinclude</tag> attribute
       to avoid having unpredictable random names assigned to the repository
       you wish to include in the image. This also facilitates modification
       of the "baseurl" entry in the .repo file from the config.sh script if
       you need to make adjustments to the path.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">password</tag>="<tag class="attvalue">string</tag>"</term>
     <listitem>
      <para>
       Specifies a password for the given repository. The
       <tag class="attribute">password</tag> attribute must be used
       in combination with the <tag class="attribute">
       username</tag> attribute. Dependent on the repository location
       this information may not be used.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">prefer-license</tag>="<tag class="attvalue">true|false</tag>"</term>
     <listitem>
      <para>
       The repository providing this attribute will be used primarily to
       install the license tarball if found on that repository. If no
       repository with a preferred license attribute exists, the search
       happens over all repositories. It's not guaranteed in that case that
       the search order follows the repository order like they are written
       into the XML description.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">priority</tag>="<tag class="attvalue">number</tag>"</term>
     <listitem>
      <para>
       Specifies the repository priority for this given repository. Priority
       values are treated differently by different package managers.
       Repository priorities allow the package management system to
       disambiguate packages that may be contained in more than one of the
       configured repositories. The smart package manager treats packages
       from repositories with the <emphasis>highest</emphasis> priority
       number as preferable to packages from a repository with a lower
       priority number. The value 0 means <quote>no priority is set</quote>.
       The zypper package manager prefers packages from a repository with a
       <emphasis>lower</emphasis> priority over packages from a repository
       with higher priority values. The value 99 means <quote>no priority is
       set</quote>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">status</tag>="<tag class="attvalue">replaceable</tag>"</term>
     <listitem>
      <para>
       This attribute should only be applied in the context of a boot image
       description. Setting the <tag class="attribute"> status</tag>
       to <tag class="attvalue">replaceable </tag> indicates that
       the specified repository my be replaced by the repositories specified
       in the image description. This is important as the KIWI generated
       boot image, if required, should be created based on packages from the
       same repositories used to build the system image.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attribute">username</tag>="<tag class="attvalue">name</tag>"</term>
     <listitem>
      <para>
       Specifies a user name for the given repository. The
       <tag class="attribute">username</tag> attribute must be used
       in combination with the <tag class="attribute">
       password</tag> attribute. Dependent on the repository location
       this information may not be used.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    When specifying an https location for a repository it is generally
    necessary to include the <quote>openssl-certs</quote> and
    <quote>cracklib-dict-full</quote> packages in the
    <tag class="attvalue">bootstrap</tag> section of the image
    configuration.
   </para>
   <para>
    The location of a repository is specified by the
    <tag class="attribute">path</tag> attribute of the mandatory
    <tag class="element">source</tag> child element. The location
    specification may include the
    <systemitem class="macro">%arch</systemitem> macro which will expand to
    the architecture of the image building host. The value for the
    <tag class="attribute">path</tag> attribute may begin with any
    of the following location indicators:
   </para>
   <variablelist>
    <varlistentry>
     <term>
      <uri>dir:///local/path</uri>
     </term>
     <listitem>
      <para>
       An absolute path to a directory accessible through the local file
       system. The <quote>dir://</quote> prefix may be omitted.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <uri>ftp://<replaceable>URL</replaceable>
      </uri>
     </term>
     <listitem>
      <para>
       A ftp protocol based network location.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <uri>http://<replaceable>URL</replaceable>
      </uri>
     </term>
     <listitem>
      <para>
       A http protocol based network location.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <uri>https://<replaceable>URL</replaceable>
      </uri>
     </term>
     <listitem>
      <para>
       A https protocol based network location. See the comment above about
       the handling of certificates and additional package requirements in
       the <tag class="attvalue">bootstrap </tag> section of the
       image configuration.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <uri>iso://<replaceable>path/to/isofile</replaceable>
      </uri>
     </term>
     <listitem>
      <para>
       An absolute path to an .iso file accessible via the local file
       system. KIWI will loop mount the the .iso file to a KIWI created
       directory with a generated name. The generated path is provided to
       the specified package manager as a repository location.
      </para>
      <para>
       Using multiple .iso files from the same SLE product, requires that
       all .iso files are located in the same directory. Only the first .iso
       file is to be specified as a repository in the
       <filename>config.xml</filename>. The first .iso file contains all
       information necessary for the package manager to locate packages that
       are contained in other .iso files of the same product. Attempting to
       use multiple .iso files in a series as standalone repositories will
       result in an error.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <uri>obs://$dir1/$dir2</uri>
     </term>
     <listitem>
      <para>
       A special network location used with the http protocol. The values of
       <varname>$dir1</varname> and <varname>$dir2</varname> represent the
       project location in the openSUSE build service. The location is
       evaluated as
       <uri>this://repos/$dir1/$dir2</uri>
       .
      </para>
      <para>
       The <quote>obs://</quote> prefix is also valid as part of the value
       for the <tag class="attribute">boot</tag> attribute of the
       <tag class="element">type</tag>. If used with the
       <tag class="attribute">boot</tag> attribute it is evaluated
       as
       <uri>this://images/$dir1/$dir2</uri>
       .
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <uri>opensuse://<replaceable>PROJECTNAME</replaceable>
      </uri>
     </term>
     <listitem>
      <para>
       A special network location used with the http protocol. The given
       <replaceable>PROJECTNAME</replaceable> specifies a project in the
       openSUSE Build Service. The repository is a repository of type
       <tag class="attvalue">rpm-md</tag>. For example:
       <tag class="attribute">path</tag>=
       <tag class="attvalue">"opensuse://openSUSE:10.3/standard"
       </tag>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <uri>plain://<replaceable>URI</replaceable>
      </uri>
     </term>
     <listitem>
      <para>
       A plain resource string. Everything following 'plain://' will be
       forwarded to the package manager without further modification. This
       type of location specification is useful when KIWI does not support a
       specific URI but the specified package manager does.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <uri>smb://<replaceable>Samba share pathname</replaceable>
      </uri>
     </term>
     <listitem>
      <para>
       A path to a samba share using the cifs protocol. KIWI creates a mount
       point and mounts the share including username and password, if
       specified. Access to the smb share from within the new root tree is
       provided via a cifs mount. Therefore, the package providing the cifs
       tools must be included in the package list for the
       <tag class="attvalue">bootstrap </tag> section of the image
       configuration. At the time of this writing the package providing the
       cifs tools is called <emphasis>cifs-utils</emphasis>. If any packages
       provided by the Samba share are used as part of the boot image the
       cifs tools must also be included in the boot image. This is
       accomplished with the
       <tag class="attribute">bootinclude</tag> attribute of the
       <tag class="element">package</tag> element. This is shown in
       the example below:
      </para>
<screen>&lt;packages type="bootstrap"&gt;
  &lt;package name="cifs-utils" bootinclude="true"/&gt;
  &lt;/packages&gt;</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <uri>this://<replaceable>PATH</replaceable>
      </uri>
     </term>
     <listitem>
      <para>
       <replaceable>PATH</replaceable> is the relative location to the image
       description directory for the current image.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>

  <section xml:id="sec.description.packages">
   <title><tag>packages</tag> Element</title>
<screen>&lt;packages type="type" profiles="name" patternType="type"
   &lt;package name="name" arch="arch"/&gt;
   &lt;package name="name" replaces="name"/&gt;
   &lt;package name="name" bootinclude="true" bootdelete="true"/&gt;
   &lt;archive name="name" bootinclude="true"/&gt;
   &lt;package .../&gt;
   &lt;namedCollection name="name"/&gt;
   &lt;namedCollection .../&gt;
   &lt;opensuseProduct name="name"/&gt;
   &lt;opensuseProduct .../&gt;
   &lt;ignore name="name"/&gt;
   &lt;ignore .../&gt;
&lt;/packages&gt;</screen>
   <para>
    The mandatory <tag>packages</tag> element specifies the list of
    packages (element <tag>package</tag>) and patterns (element
    <tag>namedCollection</tag>) to be used with the image. The value
    of the <tag class="attribute">type</tag> attribute
    specifies how the packages and patterns listed are handled, supported
    values are as follows:
   </para>
   <variablelist>
    <varlistentry>
     <term><tag class="attvalue">bootstrap</tag>
     </term>
     <listitem>
      <para>
       Bootstrap packages, list of packages for the new operating system
       root tree. The packages list the required components to support a
       chroot environment in the new system root tree, such as glibc.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attvalue">delete</tag>
     </term>
     <listitem>
      <para>
       Delete packages, list of packages to be deleted from the image being
       created.
      </para>
      <para>
       When using the delete type only <tag>package</tag> elements
       are considered, all other specifications such as
       <tag>namedCollection</tag> are ignored. The given package
       names are stored in the $<envar>delete</envar> environment variable
       of the <filename>/.profile</filename> file created by KIWI. The list
       of package names is returned by the
       baseGetPackagesForDeletion() function. This list
       can then be used to delete the packages ignoring requirements or
       dependencies. This can be accomplished in the
       <command>config.sh</command> or <command>images.sh</command> script
       by calling the following helper function:
      </para>
<screen><command>suseRemovePackagesMarkedForDeletion</command></screen>
      <para>
       Note, that the delete value is indiscriminate of the image type being
       built.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attvalue">image</tag>
     </term>
     <listitem>
      <para>
       Image packages, list of packages to be installed in the image.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attvalue">iso</tag>
     </term>
     <listitem>
      <para>
       Image packages, a list of additional packages to be installed when
       building an ISO image.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attvalue">oem</tag>
     </term>
     <listitem>
      <para>
       Image packages, a list of additional packages to be installed when
       building an OEM image.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attvalue">pxe</tag>
     </term>
     <listitem>
      <para>
       Image packages, a list of additional packages to be installed when
       building an PXE image.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><tag class="attvalue">vmx</tag>
     </term>
     <listitem>
      <para>
       Image packages, a list of additional packages to be installed when
       building a vmx virtual image of any format.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <section xml:id="sec.descriptions.using-patterns">
    <title>Using Patterns</title>
    <para>
     Using a pattern name allows you to considerably shorten the list of
     specified packages in the <filename>config.xml</filename> file. A named
     pattern, specified with the
     <tag class="element">namedCollection</tag> element
     is a representation of a predefined list of packages. Specifying a
     pattern will install all packages listed in the named pattern to be
     installed in the image. Support for patterns is distribution specific
     and available with SLES, openSUSE, CentOS and RHEL. The optional
     <tag class="attribute">patternType</tag> attribute on the
     <tag class="element">packages</tag> element allows you to
     control the installation of dependent packages in the image. You may
     assign one of the following values to the
     <tag class="attribute">patternType</tag> attribute:
    </para>
    <variablelist>
     <varlistentry>
      <term><tag class="attribute">onlyRequired</tag>
      </term>
      <listitem>
       <para>
        Incorporates only patterns and packages that the specified patterns
        and packages require. This is a "hard dependency" only resolution.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><tag class="attribute">plusRecommended</tag>
      </term>
      <listitem>
       <para>
        Incorporates patterns and packages that are required and recommended
        by the specified patterns and packages in
        <filename>config.xml</filename>.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     By default, only required patterns and packages are installed. KIWI
     depends on the package manager to resolve the specified list of
     patterns and packages against the specified repositories and complete
     the installation. Note that not all supported package managers support
     the use of named patterns, thus the value of the
     <tag class="element">packageManager</tag> element determines
     whether you are able to use named patterns or not. Should the list of
     specified packages result in a conflict the image creation process will
     stop and the information provided by the package manager will be
     captured in the build log and will be displayed in the terminal window
     where KIWI was started. The <tag class="element">ignore</tag>
     element may be of use in resolving such conflicts. However, the
     <tag class="element">ignore</tag> element is
     limited to effect packages named explicitly. Packages installed in the
     image through a named pattern are not effected by the
     <tag class="element">ignore</tag> element setting.
     Therefore, package conflicts created by packages within named patterns
     cannot be resolved using the ignore mechanism. Further, if a package is
     specified to be ignored, but is required by another package, then the
     required package is installed in the image via the automatic dependency
     resolution by the package manager in use.
    </para>
   </section>
   <section xml:id="sec.description.architecture-restrictions">
    <title>Architecture Restrictions</title>
    <para>
     To restrict a package to a specific architecture, use the arch
     attribute to specify a comma separated list of allowed architectures.
     Such a package is only installed if the build systems architecture
     (<command>uname</command> <option>-m</option>) matches one of the
     specified values of the arch attribute.
    </para>
   </section>
   <section xml:id="sec.description.packages.to.become.included">
    <title>Packages to Become Included Into the Boot Image</title>
    <para>
     The optional attributes bootinclude and bootdelete can be used to mark
     a package inside the system image description to become part of the
     corresponding boot image (initrd). This feature is most often used to
     specify bootsplash and/or graphics boot related packages inside the
     system image description but they are required to be part of the boot
     image as the data is used at boot time of the image.
    </para>
    <para>
     Packages included into the boot image with the
     <tag class="attribute">bootinclude</tag> are still
     included into the system image as well. If packages should only be
     included into the boot image, but not the system image, they need to be
     added to the <tag class="element">packages</tag> section of
     <tag class="attribute">type</tag>=<tag class="attvalue">delete</tag>.
    </para>
    <para>
     If the bootdelete attribute is specified along with the bootinclude
     attribute this means that the selected package will be marked as a
     <quote>to become deleted</quote> package and is removed by the contents
     of the <command>images.sh</command> script of the corresponding boot
     image description.
    </para>
   </section>
   <section xml:id="sec.description.data.not.available">
    <title>Data not Available as Packages to Become Included</title>
    <para>
     With the optional <tag>archive</tag> element it’s possible to
     include any kind of data into the image. The archive elements expects
     the name of a tarball which must exist as part of the system image
     description. KIWI then picks up the tarball and installs it into the
     image. If the bootinclude attribute is set along with the archive
     element the data will also become installed into the boot image.
    </para>
   </section>
  </section>
 </section>
</chapter>
