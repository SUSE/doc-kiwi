<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                         "http://www.docbook.org/xml/4.5/docbookx.dtd">
<chapter id="chap.maintenance">
 <title>Maintaining Appliance Images</title><indexterm>
 <primary>KIWI</primary>
 <secondary>maintenance</secondary></indexterm>
 <para>
  Whenever you create an appliance as described in <xref
  linkend="chap.appliance"/>, you are using a snapshot of the software
  repositories. As time goes by, the software continues to develop and the
  image becomes outdated. Something similar applies to the image
  configuration, which may become outdated when, for example, the network
  setup has changed or services have been replaced.
 </para>
 <para>
  To prevent an image from becoming outdated, KIWI provides means to
  <emphasis>maintain</emphasis> existing images.
 </para>

 <remark condition="clarity">
  2015-07-24 - fs: Waiting for input on how to proceed wit this chapter
 </remark>
 
 <figure id="fig.maintain">
  <title>Image Maintenance Scenarios</title>
  <mediaobject role="fo">
   <imageobject>
    <imagedata fileref="maintain.svg" format="SVG" width="75%"/>
   </imageobject>
   <imageobject role="html">
    <imagedata fileref="maintain.png" format="PNG"/>
<!--  width="50%" -->
   </imageobject>
  </mediaobject>
 </figure>
 <simplelist>
  <member>
    (1) Image Description as part of a versioning system like Git, Subversion,
    etc. to track changes
   </member>
  <member>
    (2) Software package source changes
   </member>
  <member>
    (3) Faster, because already prepared; cannot handle image description
    changes; requires free space to store <filename>/tmp/myOSImage</filename>
  </member>
  <member>
    (4) Image Description changes
   </member>
  <member>
    (5) Covers all possible changes, does not require storage for prepared
    trees, slower, because KIWI prepare runs again
   </member>
 </simplelist>
 <para>
  The image in <xref linkend="fig.maintain" xrefstyle="select:label"/>
  shows two possible scenarios which require an image to become updated.
  The first reason for updating an image are changes to the software, for
  example a new kernel should be used. If this change doesn’t require
  additional software or changes in the configuration the update can be done
  by KIWI itself using its <option>--upgrade</option> option. In combination
  with <option>--upgrade</option> KIWI allows to add an additional
  repository which may be needed if the updated software is not part of the
  original repository. An important thing to know is that this additional
  repository is <emphasis>not</emphasis> stored into the original
  <filename>config.xml</filename> file of the image description.
 </para>
 <para>
  Another reason for updating an image beside software updates are
  configuration changes or enhancements, for example an image should have
  replaced its browser with another better browser or a new service like
  apache should be enabled. So in short:
 </para><indexterm>
 <primary>KIWI</primary>
 <secondary>unpacked image</secondary></indexterm>

 <warning>
  <title>Don’t modify the unpacked image root tree manually!</title>
  <para>
   In principle it’s possible to changes an image manually within the unpacked
   image root tree.  However, in regards of maintenance this would be a
   nightmare, since it will leave the system in an unversioned
   condition. Nobody knows what has changed since the very first preparation
   of this image.
  </para>
 </warning>
 
 <para>
  Changes to the image configuration should be done within the image
  description. The image description itself should be part of a versioning
  system like git. All changes can be tracked down then and maybe more
  important can be assigned to product tags and branches. As a consequence
  an image must be prepared from scratch and the old unpacked image root
  tree could be removed.
 </para>
</chapter>
