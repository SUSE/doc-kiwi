<!-- Converted by suse-upgrade version 1.1 -->

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="chap.appliance"><title>Creating Appliances</title><info><abstract>
  <para>
   With the traditional model of application delivery, applications such as a
   word processor or an e-mail program are installed by a user or an
   administrator on individual machines. When deploying the application on
   multiple machines, this often requires to start the application
   installation on each machine. Furthermore, in case of machines
   solely dedicated to a single application or a defined set of applications,
   it is good practice, to adjust the operating system to optimize resource
   management and maximize security and performance. When multiple machines
   are affected, the steps for adjusting the operating system need to be
   performed on each machine, too.
  </para>
  <para>
   An alternative to the traditional model of application delivery is to
   provide a so-called <quote>appliance</quote>. An appliance is the
   combination of the parts of a general purpose OS needed by a given
   application and the application itself, bundled and delivered as one
   unit. This unit may be delivered in a variety of formats, for example a
   ready to run virtual machine or a self-installing system on an optical
   media or a flash disk.
  </para>

  <para>
   The appliance model has a many advantages. Operating system and
   application installation are no longer separate steps. The application is
   installed together with the operating system and the installation does not
   require manual intervention. The appliance provider can preconfigure the
   application to be ready-to-run directly after installation. Furthermore,
   the appliance provider can customize the operating system in terms of
   performance, resources and security, so it best fits the given
   appliance.
  </para>
 </abstract></info>
 
 
 <section xml:id="sec.appliance.kiwi-model">
  <title>The KIWI Model</title>
  <para>
   KIWI supports building appliances. When building appliances with KIWI the
   following procedure has proven to work reliably. Nevertheless it is a
   recommendation only and can be adapted to special needs and environments.
  </para>

  <procedure xml:id="proc.appliance.general-building">
   <step>
    <para>
     Choose an appropriate image description from the KIWI example templates.
     They are provided by the packages <package>kiwi-templates</package>,
     <package>kiwi-desc-vmxboot</package>,
     <package>kiwi-desc-netboot</package>, and
     <package>kiwi-desc-oemboot</package>. The templates are installed to
     <filename class="directory">/usr/share/kiwi/images</filename>.  Add or
     adapt repositories and/or package names, according to the distribution
     you want to build an image for.
    </para>
   </step>
   <step>
    <para>
     Allow the image to create an in-place git repository to allow tracking
     non-binary changes. This is done by adding the following line into the
     <command>config.sh</command> script:
    </para>
    <screen>baseSetupPlainTextGITRepository</screen>
   </step>
   <step>
    <para>
     Set up a testing environment. A physical machine supporting to boot
     from a flash disk is recommended. All image templates provided by KIWI
     contain a hybrid iso type setup which is suitable for such a machine.
    </para>
   </step>
   <step>
    <para>
     Build the live stick appliance by running
    </para>
    <screen>kiwi --build template-name</screen>
   </step>
   <step>
    <para>
     Transfer the image generated in the previous step to the flash disk. Note
     that all data on the disk will be erased!
    </para>
    <screen>dd if=<replaceable>PATH_TO_ISO_IMAGE</replaceable>
    of=<replaceable>FLASH_DISK_DEVICE</replaceable> bs=4M</screen>
   </step>
   <step>
    <para>
     Plug the flash disk into your test machine and boot it from the disk
     containing the appliance.
    </para>
   </step>

   <step>
    <para>
     After your test system has successfully booted the image, log in to your
     appliance and start to tweak the system according to your needs.  This
     includes all actions required to configure the appliance as
     needed. Before you start take care for the following:
    </para>
    <para>
      Create an initial package list. This can be done by calling:
    </para>
    <screen>rpm -qa | sort &gt; /tmp/deployPackages</screen>
    <para>
      Check the output of the command <command>git</command>
      <option>status</option> and add all files matching the following
      criteria to <filename>/.gitignore</filename>:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       the file is not yet part of the repository
      </para>
     </listitem>
     <listitem>
      <para>
       you do not plan to change the file
      </para>
     </listitem>
     <listitem>
      <para>
       the file will not be included by one of the image description overlay
       files
      </para>
     </listitem>
    </itemizedlist>
    <para>
     When the initial package list exist and the git repository is set up,
     you can start to configure the system.
    </para>
    <note>
     <title>Installing Additional Software</title>
     <para>
      Do not add additional software by installing a package being part of
      a repository not listed in <filename>configuration.xml</filename> or by
      compiling it from the sources. It is very hard to find out what binary
      files have been installed that way and it is also not architecture-safe.
     </para>
     <para>
      If there is really no other way for the software to become part of the
      image, you should address this issue directly in your image description
      and the <command>config.sh</command> script, but not after the initial
      deployment has happened.
     </para>
    </note>

   </step>

   <step>
    <para>
     As soon as the appliance on your test system works as expected it is
     ready to enter the final stage. At this point you have done several
     changes to the system which are tracked by the git repository and the
     package list. To include them into your image description, use the
     following process:
    </para>
   </step>
   <step>
    <para>
     Check the differences between the currently installed packages and
     the initial deployment list. This can be done by running:
    </para>
    <screen>rpm -qa | sort &gt; /tmp/appliancePackages
diff -u /tmp/deployPackages /tmp/appliancePackages</screen>
    <para>
     Add all packages labeled with <literal>(+)</literal> to the
     <tag class="starttag">packages type="image"</tag> section of
     your config.xml file and remove packages labeled with
     <literal>(âˆ’)</literal>.
    </para>
    <para>
     In case you want to keep packages that have been automatically removed
     by the package manager, make sure you address these packages in the
     <filename>config.sh</filename> script. If you have installed packages
     from repositories which are not yet configured in
     <filename>config.xml</filename>, add them to allow KIWI to
     install the packages.
    </para>
   </step>
   <step>
    <para>
     Check the differences made in the configuration files by running:
    </para>
    <screen>git diff &gt;/tmp/appliancePatch</screen>
    <para>
     The patch created with this command
     (<filename>/tmp/appliancePatch</filename>) should become part of your
     image description. To make sure it is applied when preparing the image,
     add the following line to <command>config.sh</command>:
    </para>
    <screen><command>patch</command> -p0 &lt; appliancePatch</screen>
   </step>
   <step>
    <para>
     Check for new non binary files that have been added. This can be done
     by calling:
    </para>
    <screen><command>git</command> status</screen>
    <para>
     All files not yet tracked, will be listed under <literal>Untracked
     files</literal>. Make sure to add all files from this list
     <emphasis>which are not created automatically</emphasis> to your image
     description. To do this, clone (copy) these files with regards to the
     file system structure as overlay files in your image description
     <filename class="directory">root/</filename> directory.
    </para>
   </step>
   <step>
    <para>
     All customization work you did within your appliance is now stored in the
     image description. The image description you created can be re-used
     for all image types supported by KIWI.
    </para>
   </step>
  </procedure>

  <para>
   To make sure the appliance works as expected prepare a new image tree and
   create an image from the new tree. You may optionally disable the creation
   of the git repository within this new image tree to save disk space. If
   this appliance is a server, you should keep it, because it allows you to
   keep track of changes during the live time of this appliance.
  </para>
  <note>
   <title>Cross Platform Appliance Building</title>
   <para>
    Building appliances for a specific processor architecture on a different
    processor architecture is in generally <emphasis>not</emphasis> possible
    with KIWI. This limitation is based on the requirement that KIWI needs to
    be able to execute installed software inside the unpacked image tree. If
    the software installed inside the unpacked image tree does not run on the
    architecture of the build platform then KIWI cannot build the
    appliance. The only exception is building 32-bit x86 appliances on a
    64-bit x86-64 architecture.
   </para>
   <para>
    KIWI's option <option>--target-arch</option> is not intended to support
    cross-platform appliance builds. It rather tells the package manager to
    install packages for the specified architecture.
   </para>
  </note>
 </section>
</chapter>
