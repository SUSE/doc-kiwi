<!-- Converted by suse-upgrade version 1.1 -->

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="chap.vmx"><title>VMX Image / Virtual Disks</title><info><abstract>
  <para>
   A VMX image is a virtual disk image for use in full virtualization systems
   like Qemu or VMware. The image is a file containing the system (represented
   by the configured packages in <filename>config.xml</filename>) as well as
   partition data and boot loader information. VMX images have a fixed disk
   size and geometry that cannot be changed (see <xref linkend="chap.oem"/>
   for images with expandable disks).
  </para>
 </abstract></info>
 
 

 <tip>
  <title>VMX Image Description Templates</title>
  <para>
   KIWI comes with many image description templates. It is
   recommended to use them as a basis for your own image descriptions. To do
   so, copy the respective directory containing the image description of your
   choice to you working directory and adjust it according to your needs.
  </para>
  <para>
   VMX image templates are shipped with the package
   <package>kiwi-desc-vmxboot</package>. They are installed to
   <filename>/usr/share/kiwi/image/vmxboot</filename>.
  </para>
 </tip>
 
 <tip>
  <title>Just Enough Operating System (JeOS) Templates</title>
  <para>
   The package <package>kiwi-templates</package> contains ready-to-use JeOS
   templates. They are installed to <filename class="directory">/usr/share/kiwi/image/*-JeOS/</filename>. These
   templates can be used without any modification to build images containing
   a minimal operating system. The template directory is in KIWI's search
   path, therefore it is sufficient to only specify the name of the
   <filename>*-JeOS</filename> directory on the KIWI command line. Get a list
   of available templates with the following command:
  </para>
  <screen>(cd /usr/share/kiwi/image/ &amp;&amp; ls -d1 *-JeOS)</screen>
 </tip>

 <section xml:id="sec.vmx.building">
  <title>Building VMX Images</title>

  <para>
   The following example shows how to build a Just enough Operating System
   (JeOS) based on SUSE Linux Enterprise 12:
  </para>

  <screen>kiwi --build suse-SLE12-JeOS -d /tmp/myvm-result --type vmx</screen>

  <para>
   The command creates a virtual disk in the <filename class="extension">.raw</filename> format that can be directly booted with any
   virtualization system. The following example shows how to boot it with QEMU:
  </para>

  <screen>qemu /tmp/myvm-result/LimeJeOS-SLE12.x86_64-1.13.1.raw -m 1024 </screen>

  <para>
   KIWI always generates a file in the <filename class="extension">.raw</filename> format. The <filename class="extension">.raw</filename> file is a disk image with an
   equivalent to the structure of a physical hard disk. <filename class="extension">.raw</filename> images are supported by any hypervisor,
   but are rather big in size (not compressed) and do not offer the best
   performance. 
  </para>
  <para>
   Therefore each virtualization system supports its own proprietary format
   supporting compression and improved I/O performance. To build an image in a
   format other than <filename class="extension">.raw</filename>, add the
   <tag class="attribute">format</tag> attribute to the type
   definition in <filename>config.xml</filename>:
  </para>

  <screen>&lt;image ...&gt;
  &lt;preferences&gt;
    &lt;type format="<replaceable>FORMAT</replaceable>" .../&gt;
    ...
  &lt;/preferences
  ...
&lt;/image&gt;</screen>

  <para>
   The following values can be set for <replaceable>FORMAT</replaceable>:
  </para>

  <table xml:id="tab.vmx.supported-disk-formats">
   <title>Supported Virtual Disk Formats</title>
   <tgroup cols="2">
    <colspec colwidth="1*"/>
    <colspec colwidth="3*"/>
    <thead>
     <row>
      <entry>Name</entry>
      <entry>Description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>vmdk</entry>
      <entry>Disk format for VMware</entry>
     </row>
     <row>
      <entry>vhd|vhd-fixed</entry>
      <entry>Disk format for Microsoft HyperV</entry>
     </row>
     <row>
      <entry>ovf|ova</entry>
      <entry>Open Virtual Format requires VMware's ovftool</entry>
     </row>
     <row>
      <entry>qcow2</entry>
      <entry>QEMU virtual disk format</entry>
     </row>
     <row>
      <entry>vdi</entry>
      <entry>Disk format for VirtualBox</entry>
     </row>
     <row>
      <entry>vagrant</entry>
      <entry>Vagrant Box Format</entry>
     </row>
     <row>
      <entry>gce</entry>
      <entry>Google Cloud Format</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </section>
 <section xml:id="sec.vmx.vmware-support">
  <title>VMware support</title>
  <para>
   A VMware image is accompanied by a guest configuration file. This file
   includes information about the hardware to be represented by the guest
   as well as specifications of resources such as memory.
  </para>
  <para>
   It is possible to specify the VMware configuration settings in
   <filename>config.xml</filename>. Additionally, it is possible to also
   include selected packages in the created image that are specific to the VM
   image generation. This is done in the <emphasis>machine</emphasis> section
   in the configuration file. The following example will create a VMware
   guest configuration with 512Â MB of RAM and an IDE disk controller:
  </para>
  <screen>&lt;image ...&gt;
  &lt;preferences&gt;
    &lt;type format="vmdk" ...&gt;
      &lt;machine memory="512"&gt;
        &lt;vmdisk controller="ide" id="0"/&gt;
      &lt;/machine&gt;
      ...
    &lt;/type&gt;
    ...
  &lt;/preferences
  ...
&lt;/image&gt;</screen>

  <para>
   The guest configuration can be loaded via the VMware user interface and may
   be modified through the GUI. The configuration file has the extension
   <filename class="extension">.vmx</filename> and the same basename as the
   image:
  </para>
  <screen>/tmp/myvm-result/LimeJeOS-SLE12.x86_64-1.13.1.vmx</screen>
 </section>
 
<section xml:id="sec.vmx.lvm">
 <title>LVM Support</title>
 <para>
  Support for LVM has been added for all image types which are disk-based.  In
  order to use LVM for the vmx type just add the <option>--lvm</option> option
  as part of the KIWI create/build step. Alternatively add the attribute
  lvm="true" as part of the type section in your
  <filename>config.xml</filename> file.
 </para>
  <screen>&lt;image ...&gt;
  &lt;preferences&gt;
    &lt;type lvm="true" .../&gt;
    ...
  &lt;/preferences
  ...
&lt;/image&gt;</screen>
 <para>
   When using modern file systems like Btrfs or zfs, KIWI also supports using
   their native volume management system. For more information how to setup
   custom partitions/volumes, see <xref linkend="chap.partitions"/>.
 </para>
</section>

<section xml:id="sec.vmx.bootpartition">
 <title>Extra Boot Partition</title>
 <para>
  Depending on the selected root file system and the capabilities of the boot
  loader, KIWI automatically decides whether to set up a separate boot
  partition. The format of a boot partition is set to ext2 by default.
 </para>
 <para>
  To manually control the attributes <tag class="attribute">bootpartition</tag> (can be set to <tag class="attvalue">true</tag> or <tag class="attvalue">false</tag>) and <tag class="attribute">bootfilesystem</tag> (can be set to <tag class="attvalue">ext2</tag>, <tag class="attvalue">ext3</tag>,
  <tag class="attvalue">ext4</tag>, <tag class="attvalue">fat32</tag>, or <tag class="attvalue">fat16</tag>). A runtime check at build time will test
  whether the given configuration can be implemented. The following example
  will create an etx3-formatted boot partition:
 </para>
 <screen>&lt;image ...&gt;
  &lt;preferences&gt;
    &lt;type bootpartition="true" bootfilesystem="ext3" .../&gt;
    ...
  &lt;/preferences
  ...
&lt;/image&gt;</screen>
 </section>
</chapter>
