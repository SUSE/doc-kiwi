<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                         "http://www.docbook.org/xml/4.5/docbookx.dtd"
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<chapter id="chap.xen">
 <title>Xen Para- and Full virtual Images</title><indexterm>
 <primary>KIWI</primary>
 <secondary>XEN image</secondary></indexterm><indexterm>
 <primary>images</primary>
 <secondary>XEN</secondary></indexterm><indexterm>
 <primary>XEN image</primary></indexterm>

 <!-- fs 2015-12-21:
      I do not think we need to explain what XEN is here
 <para>
  Xen is a free software virtual machine monitor. It allows several guest
  operating systems to be executed on the same computer hardware at the same
  time.
 </para>
 <para>
  A Xen system is structured with the Xen hypervisor as the lowest and most
  privileged layer. Above this layer are one or more guest operating
  systems, which the hypervisor schedules across the physical CPUs. The
  first guest operating system, called in Xen terminology <quote>domain
  0</quote> (dom0), is booted automatically when the hypervisor boots and
  given special management privileges and direct access to the physical
  hardware. The system administrator logs into dom0 in order to start any
  further guest operating systems, called <quote>domain 0</quote> (domU) in
  Xen terminology.
  </para>
  -->
 <para>
  A Xen image is a virtual disk like a vmx but with the Xen kernel installed
  for dom0 or para virtual guest images. For fully virtualized guest images
  any Kernel, for example <systemitem
  class="resource">kernel-default</systemitem>, my be used together with the
  Xen kernel modules.
 </para>
 <para>
  A Xen image can only be booted on a Xen dom0 server. A xen guest is booted
  via a boot infrastructure. For paravirtual images <literal>pyGrub</literal>
  or <literal>pvGrub</literal> can be used, while for HVM (fully virtualized)
  a special hvmloader is used. Xen extracts boot information from the given
  image and boots the guest. Depending on the guest type, also the boot loader
  configuration needs to be read. This puts some constraints on the
  configuration which are addressed by KIWI.
 </para>

 <tip>
  <title>Xen Image Description Templates</title>
  <para>
   &template_intro;
  </para>
  <para>
   There are no special templates for Xen images. You may either use OEM or
   VMX image templates. OEM image templates are shipped with the package
   <package>kiwi-desc-oemboot</package>. They are installed to
   <filename>/usr/share/kiwi/image/oemboot</filename>. VMX image templates are
   shipped with the package <package>kiwi-desc-vmxboot</package>. They are
   installed to <filename>/usr/share/kiwi/image/vmxboot</filename>.
  </para>
 </tip>


 <sect1 id="sec.xen.dom0.building">
  <title>Building a Dom0 Image</title>

  <para>
   The following example shows how to build a Just enough Operating System
   (JeOS) based on SUSE Linux Enterprise 12. The example adds a
   <literal>xenFlavour</literal> profile which builds a dom0 image for the OEM
   image type.
  </para>

<screen><command>kiwi</command> --build suse-SLE12-JeOS -d /tmp/myoem-result --type oem \
     --add-profile xenFlavour</screen>
 </sect1>

 <sect1 id="sec.xen.dom0.using">
  <title>Testing the Dom0 Image</title>

  <para>
   Basically the dom0 represents the most privileged layer with access to
   the hardware. Running such an image in a fully
   virtualized system like Qemu, as shown below, is only suitable for testing
   purposes. For production system this is not supported and suffers from a
   major performance penalty. To test the image
   with <command>qemu</command>, run the following commands:
  </para>

<screen><command>cd</command> /tmp/myoem-result
<command>qemu-img</command> create mydom0 10g
<command>qemu</command> -cdrom LimeJeOS-SLE12.x86_64-1.13.1.install.iso -hda mydom0 -boot d</screen>

  <para>
   Once booted <emphasis>mydom0</emphasis> is a Xen dom0 from which other
   Xen guests can be started.
  </para>
 </sect1>

 <sect1 id="sec.xen.domU.pv.building">
  <title>Building a Paravirtualized Xen Guest Image</title>

  <para>
   The following example shows how to build a Just enough Operating System
   (JeOS) based on SUSE Linux Enterprise 12. The example again makes use of
   the <literal>xenFlavour</literal> profile but builds a simple vmx
   image. The result is a disk image with kernel-xen prepared for paravirtual
   boot via GRUB2. In order to boot such a guest a <literal>pvGrub</literal>
   or <literal>pyGrub</literal> machine configuration supporting GRUB2 must be
   provided.
  </para>

<screen><command>kiwi</command> --build suse-SLE12-JeOS -d /tmp/myvmx-result --type vmx \
     --add-profile xenFlavour</screen>
 </sect1>

 <sect1 id="sec.xen.domU.hvm.building">
  <title>Building a Fully Virtualized Xen Guest</title>

  <para>
   The following example shows how to build a Just enough Operating System
   (JeOS) based on SUSE Linux Enterprise 12. Contrary to the paravirtual
   guest image this example builds a simple vmx image including the standard
   kernel plus some kernel modules required by Xen. In order to boot such a
   guest a hvmloader machine configuration must be provided.
  </para>

<screen><command>kiwi</command> --build suse-SLE12-JeOS -d /tmp/myvmx-result --type vmx \
     --add-profile xenFlavourHVM</screen>
 </sect1>


<!-- from here -->

 <sect1 id="sec.xen.using">
  <title>Using the Guest Images</title>

  <para>
   In order to run a domain U the Xen tool <command>xl</command> needs to be
   called in conjunction with a domain U configuration file:
  </para>

<screen><command>xl</command> create -f <replaceable>CONFIG-FILE</replaceable></screen>

  <para>
   For paravirtual guest images KIWI supports the creation of the
   configuration file according to information provided with the <sgmltag
   class="element">machine</sgmltag> element of the KIWI
   configuration file <filename>config.xml</filename>:
  </para>

  <screen>&lt;image ...&gt;
  &lt;preferences ...&lt;
    &lt;machine memory="512" domain="domU"&gt;
      &lt;vmdisk id="0" device="/dev/xvda" controller="ide"/&gt;
      &lt;vmnic interface=""/&gt;
    &lt;/machine&gt;
    ...
  &lt;/preferences&gt;
  ...
&lt;/image&gt;</screen>

  <para>
   If this information exists, KIWI creates a file with the extension
   <filename>.xenconfig</filename>. Note that not all possible configuration
   options are supported by the KIWI Xen config file creator. For fully
   virtualized images there is currently no support to create the
   configuration from KIWI. However tools like <command>virt-manager</command>
   support you setting up the machine configuration. Refer to the <ulink
   url="https://www.suse.com/documentation/sles-12/book_virt/data/book_virt.html">SUSE
   Linux Enterprise Virtualization Guide</ulink> or the <ulink
   url="http://www.xenproject.org/help/documentation.html">Xen
   Documentation</ulink> for more information.
  </para>
 </sect1>
</chapter>
