<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                         "http://www.docbook.org/xml/4.5/docbookx.dtd">

<chapter id="chap.xen">
  <title>Xen Para- and Full virtual Images</title>
  <indexterm>
    <primary>KIWI</primary>
    <secondary>XEN image</secondary>
  </indexterm>
  <indexterm>
    <primary>images</primary>
    <secondary>XEN</secondary>
  </indexterm>
  <indexterm>
    <primary>XEN image</primary>
  </indexterm>
  <para>Xen is a free software virtual machine monitor. It allows
    several guest operating systems to be executed on the same computer
    hardware at the same time. </para>

  <para>A Xen system is structured with the Xen hypervisor as the lowest
    and most privileged layer. Above this layer are one or more guest
    operating systems, which the hypervisor schedules across the
    physical CPUs. The first guest operating system, called in Xen
    terminology <quote>domain 0</quote> (dom0), is booted automatically
    when the hypervisor boots and given special management privileges
    and direct access to the physical hardware. The system administrator
    logs into dom0 in order to start any further guest operating
    systems, called <quote>domain 0</quote> (domU) in Xen terminology. </para>
  <para>A Xen image is a virtual disk like a vmx but with the xen kernel
    installed for dom0 or para virtual guest images. For full virtual
    guest images any kernel e.g kernel-default can be used together
    with a xen kernel modules packages which must be available for
    the used kernel</para>
  <para>
    In order to run it a Xen dom0 server needs to run. A xen guest
    is booting via a surrounded boot infrastructure. For paravirtual
    images pyGrub or pvGrub can be used, while for HVM an extra hvmloader
    is used. Xen extracts information to boot from the given image
    and boots the guest. Depending on what type of guest is booted also
    the bootloader configuration could be read. Thus this put some
    constraints on the configuration which are addressed by kiwi</para>
 
  <sect1 id="sec.xen.dom0.building">
    <title>Building a Dom0</title>
    <para>This example is based on SLES version 12. The example provides a
      xenFlavour profile which builds a dom0 image for the oem image type
      as follows</para>
   
<screen><command>kiwi</command> --build suse-SLE12-JeOS -d /tmp/myoem-result --type oem \
     --add-profile xenFlavour</screen>
  </sect1>
 
  <sect1 id="sec.xen.dom0.using">
    <title>Using the Dom0 Image</title>
    <para>Basically the dom0 represents the most privileged layer with access
      to the hardware. It is possible to run such an image inside of a full
      virtual system like Qemu but this is not recommended. First and foremost
      because the performance suffers from doing so and secondly because
      kernel-xen is not officially supported to work within a stack of
      hypervisors. For testing however it's ok to just run this oem image
      in Qemu as follows:</para>

<screen><command>cd</command> /tmp/myoem-result
<command>qemu-img</command> create mydom0 10g
<command>qemu</command> -cdrom LimeJeOS-SLE12.x86_64-1.13.1.install.iso -hda mydom0 -boot d</screen>

    <para>
      Once installed <emphasis>mydom0</emphasis> is a Xen dom0 from which
      other xen guests can be started</para>
  </sect1>

  <sect1 id="sec.xen.domU.pv.building">
    <title>Building a Para Virtual Xen Guest</title>
    <para>This example is based on SLES version 12. The example makes again
      use of the xenFlavour profile but builds a simple vmx image. The
      result is a disk image with kernel-xen prepared for paravirtual boot
      via grub2. In order to boot such a guest a pvGrub or pyGrub
      machine configuration supporting grub2 must be provided</para>
      
<screen><command>kiwi</command> --build suse-SLE12-JeOS -d /tmp/myvmx-result --type vmx \
     --add-profile xenFlavour</screen>
  </sect1>

  <sect1 id="sec.xen.domU.hvm.building">
    <title>Building a Full Virtual Xen Guest</title>
    <para>This example is based on SLES version 12. In contrast to the
      paravirtual guest image this example builds a simple vmx image
      including the standard kernel plus some xen required kernel modules.
      In order to boot such a guest a hvmloader machine configuration
      must be provided</para>

<screen><command>kiwi</command> --build suse-SLE12-JeOS -d /tmp/myvmx-result --type vmx \
     --add-profile xenFlavourHVM</screen>
  </sect1>

  <sect1 id="sec.xen.using">
    <title>Using the Guest Images</title>
    <para>In order to run a domain U the Xen tool <command>xm</command>
      needs to be called in conjunction with a domain U
      configuration file like the following example:</para>

<screen><command>xm</command> create -c config-file</screen>
   
    <para>
      For paravirtual guest images KIWI supports
      the creation of the configuration file according to information
      given in the KIWI <filename>config.xml</filename></para>

<screen>&lt;machine memory="512" domain="domU"&gt;
    &lt;vmdisk id="0" device="/dev/xvda" controller="ide"/&gt;
    &lt;vmnic interface=""/&gt;
&lt;/machine&gt;</screen>

    <para>
      If this information exists kiwi creates a file with the
      extension <filename>.xenconfig</filename></para>

    <para>
      Please note that not all possible configuration options are
      supported with KIWI xen config file creator. For hvm images
      there is currently no support to create the configuration from
      kiwi. However tools like <emphasis>virt-manager</emphasis>
      support you with setting up the machine configuration.</para>
    <para>
      More details how to configure the guest image with Xen is
      provided on <ulink url="http://www.xenproject.org/help/documentation.html"/></para>
  </sect1>
</chapter>
