<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                         "http://www.docbook.org/xml/4.5/docbookx.dtd">
<sect1 id="chap.caches">
 <title>Image Caches</title>
  <para>
   The process of creating an appliance could take quite some time and often
   the same software is installed over and over again. To speed up that
   process KIWI can create and re-use so called image caches. An image cache
   in KIWI is a partial root tree created from a cache image description.
  </para>

  <figure id="fig.imagecachingarch">
   <title>Image Caching Architecture</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="cache.svg" format="SVG" width="75%"/>
<!-- width="50%" -->
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="cache.png" format="PNG"/>
<!-- width="50%" -->
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   A cache needs to be created before it can be used. This can be done using
   any standard kiwi image description, including boot image
   descriptions. That means you can simply use one of the template or *boot
   descriptions and create a cache from it. However, it is more efficient to
   create image descriptions for the sole purpose of caching. Such
   descriptions could represent a set of patterns for example. The less
   specific a cache is the more often it can be re-used
  </para>

  <para>
   Once there are caches in the system KIWI selects the best match and
   mounts the cache in a way that all write actions (copy-on-write cache)
   are redirected to the new root system. That way the cache itself is never
   changed and can be re-used simultaneously for other build processes. As a
   result the build process does not start with an empty tree but with a tree
   filled with the contents of the cache. Only the missing parts need to be
   added, which speeds up the build considerably.
  </para>
 <example id="sec.caches.example">
  <title>Building Multiple VMX Images</title>

  <para>
   Assume we want to build some images of type 'vmx' based on the SLES 12 JeOS
   image description. Create image caches for the system and the boot image
   like follows:
  </para>

  <procedure>
   <step>
    <para>
     Build the boot image (initrd) cache:
    </para>
    <screen>kiwi --init-cache /usr/share/kiwi/image/vmxboot/suse-SLES12</screen>
   </step>
   <step>
    <para>
     Build the JeOS image cache:
    </para>
    <screen>kiwi --init-cache /usr/share/kiwi/image/suse-SLE12-JeOS/</screen>
   </step>
  </procedure>

  <para>
   By default those caches will be created in
   <filename>/var/cache/kiwi-images</filename>. To run a build which uses
   caches, run the following command;
  </para>

<screen>kiwi --build suse-SLE12-JeOS -d /tmp/myimage --type vmx \
     --cache /var/cache/kiwi-images</screen>

  <para>
   This call speeds up the build a lot compared to building without
   caches. It is important to understand that a cache based build will create a
   root tree which contains only the differences compared to the used
   cache. Thus at any time you want to create an image out of it you need to
   make sure that the cache exists and is accessible on the system.
  </para>
 </example>
</sect1>
