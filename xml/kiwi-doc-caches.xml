<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                         "http://www.docbook.org/xml/4.5/docbookx.dtd">

<chapter id="chap.caches">
  <title>Image Caches</title>
  <indexterm>
    <primary>KIWI</primary>
    <secondary>Caches</secondary>
  </indexterm>
  
  <sect1 id="sec.caches.introduction">
    <title>Introduction</title>
    <para>
      The process of creating an appliance could take quite some time
      and often the same software is installed over and over again. In
      order to speed up that process kiwi is able to create and re-use
      so called image caches. An image cache in kiwi is a partial root tree
            created from a cache image description.
    </para>

    <figure id="fig.imagecachingarch">
      <title>Image Caching Architecture</title>
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="cache.svg" format="SVG"/><!-- width="50%" -->
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="cache.png" format="PNG"/><!-- width="50%" -->
        </imageobject>
      </mediaobject>
    </figure>

    <para>
      Before one can use a cache it needs to be created. A cache can be
      created from any standard kiwi image description, including boot image
      descriptions. That means you can
      simply use one of the template or *boot descriptions and create a
      cache from
      it. But it might be more clever to create image descriptions for the
      purpose of caching. Such descriptions could represent a set of patterns
      for example. The less special a cache is the more often it can be re-used
    </para>
    <para>
      Once there are caches in the system kiwi selects the best match and
      mounts the cache in a way that all write actions (copy-on-write cache)
      are redirected to the new root system. That way the cache itself is never changed
      and can be re-used simultaniosly for other build processes. As result
      the build process doesn't start with an empty tree but with a tree
      almost complete. Only the missing parts are now installed and according
      to how much the cache already covered this process can speedup the build
    </para>
  </sect1>

  <sect1 id="sec.caches.example">
    <title>Example</title>
    <para>
      Let's say we know that we want to build some images of type 'vmx'
      and based on the SLES 12 JeOS image description. In order to
      create image caches for the system and the boot image the following
      steps needs to be done:
    </para>
    <procedure>
      <step>
        <para>Build the boot image (initrd) cache:</para>
        <screen><command>kiwi</command> --init-cache /usr/share/kiwi/image/vmxboot/suse-SLES12</screen>
      </step>
      <step>
        <para>Build the JeOS image cache:</para>
        <screen><command>kiwi</command> --init-cache /usr/share/kiwi/image/suse-SLE12-JeOS/</screen>
      </step>
    </procedure>
    <para> By default those caches will be created in
      <filename>/var/cache/kiwi-images</filename>. To run a build which
      makes use of the cache the following command is used: </para>
      <screen><command>kiwi</command> --build suse-SLE12-JeOS -d /tmp/myimage --type vmx \
     --cache /var/cache/kiwi-images</screen>
      <para>
      This call speeds up the build a lot compared to the creation without a
      cache. It's important to understand that a cache based build will
      create a root tree which contains only the differences 
      compared to the used cache. Thus at any time you want
      to create an image out of it you have to make sure that the cache
      exists and is accessible on the system.
    </para>
  </sect1>
</chapter>
