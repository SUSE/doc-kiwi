<!-- Converted by suse-upgrade version 1.1 -->

<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="ref.kiwi.config.sh">
 <refmeta>
  <refentrytitle>kiwi::config.sh</refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo version="5.0" class="version">_KV_</refmiscinfo>
  <refmiscinfo version="5.0" class="manual">KIWI Manualpage</refmiscinfo>
 </refmeta>
 <refnamediv>
  <refname>KIWI::config.sh</refname><refpurpose>Customization File for KIWI image description</refpurpose>
 </refnamediv>
 <refsect1 xml:id="kiwi.config.description">
  <title>Description</title>
  <para>
   The KIWI image description allows to have an optional
   <filename>config.sh</filename> bash script in place. It can be used for
   changes appropriate for all images to be created from a given unpacked
   image (since config.sh runs prior to create step) Basically the script
   should be designed to take over control of adding the image operating
   system configuration. Configuration in that sense means all tasks which
   runs once in an os installation process like activating services,
   creating configuration files, prepare an environment for a firstboot
   workflow, etc. The <filename>config.sh</filename> script is called
   <emphasis>after</emphasis> the following kiwi built in configuration
   tasks: User/Groups, copy of overlay root tree and setup of AutoYaST If
   <filename>config.sh</filename> exits with an exit code != 0 the kiwi
   process will exit with an error too.
  </para>
  <example>
   <title>Template for config.sh</title>
<screen>
#======================================
# Functions...
#--------------------------------------
test -f /.kconfig &amp;&amp; . /.kconfig
test -f /.profile &amp;&amp; . /.profile

#======================================
# Greeting...
#--------------------------------------
echo "Configure image: [$kiwi_iname]..."

#======================================
# Mount system filesystems
#--------------------------------------
baseMount

#======================================
# Call configuration code/functions
#--------------------------------------
...

#======================================
# Umount kernel filesystems
#--------------------------------------
baseCleanMount

#======================================
# Exit safely
#--------------------------------------
exit 0
</screen>
  </example>
 </refsect1>
 <refsect1 xml:id="kiwi.config.functions">
  <title>Common functions</title>
  <para>
   The <filename>.kconfig</filename> file allows to make use of a common set
   of functions. Functions specific to SUSE Linux specific begin with the
   name <emphasis>suse</emphasis>. Functions applicable to all linux systems
   starts with the name <emphasis>base</emphasis>. The following list
   describes the functions available inside the
   <filename>config.sh</filename> script.
  </para>
  <variablelist>
   <varlistentry>
    <term version="5.0">baseCleanMount
    </term>
    <listitem>
     <para>
      Umount the system filesystems <filename>/proc</filename>,
      <filename>/dev/pts</filename>, and <filename>/sys</filename>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseDisableCtrlAltDel
    </term>
    <listitem>
     <para>
      Disable the <keycombo action="press">
      <keycap function="control">Ctrl</keycap>
      <keycap function="alt">Alt</keycap>
      <keycap function="delete">Del</keycap> </keycombo> key sequence
      setting in <filename>/etc/inittab</filename>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseGetPackagesForDeletion
    </term>
    <listitem>
     <para>
      Return the name(s) of packages which will be deleted
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseGetProfilesUsed
    </term>
    <listitem>
     <para>
      Return the name(s) of profiles used to build this image
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseSetRunlevel {value}
    </term>
    <listitem>
     <para>
      Set the default run level
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseSetupBoot
    </term>
    <listitem>
     <para>
      Set up the linuxrc as init
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseSetupBusyBox {-f}
    </term>
    <listitem>
     <para>
      activates busybox if installed for all links from the
      <filename>busybox/busybox.links</filename> fileâ€”you can choose
      custom apps to be forced into busybox with the <option>-f</option>
      option as first parameter, for example:
     </para>
<screen>baseSetupBusyBox -f /bin/zcat /bin/vi</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseSetupInPlaceGITRepository
    </term>
    <listitem>
     <para>
      Create an in place git repository of the root directory. This process
      may take some time and you may expect problems with binary data
      handling
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseSetupInPlaceSVNRepository {path_list}
    </term>
    <listitem>
     <para>
      Create an in place subversion repository for the specified
      directories. A standard call could look like this
      baseSetupInPlaceSVNRepository <filename>/etc</filename>,
      <filename>/srv</filename>, and <filename>/var/log</filename>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseSetupPlainTextGITRepository
    </term>
    <listitem>
     <para>
      Create an in place git repository of the root directory containing all
      plain/text files.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseSetupUserPermissions
    </term>
    <listitem>
     <para>
      Search all home directories of all users listed in
      <filename>/etc/passwd</filename> and change the ownership of all files
      to belong to the correct user and group.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseStripAndKeep {list of info-files to keep}
    </term>
    <listitem>
     <para>
      helper function for strip* functions read stdin lines of files to
      check for removing params: files which should be keep
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseStripDocs {list of docu names to keep}
    </term>
    <listitem>
     <para>
      remove all documentation, except one given as parameter
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseStripInfos {list of info-files to keep}
    </term>
    <listitem>
     <para>
      remove all info files, except one given as parameter
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseStripLocales {list of locales}
    </term>
    <listitem>
     <para>
      remove all locales, except one given as parameter
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseStripMans {list of manpages to keep}
    </term>
    <listitem>
     <para>
      remove all manual pages, except one given as parameter example:
      baseStripMans more less
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseStripRPM
    </term>
    <listitem>
     <para>
      remove rpms defined in <filename>config.xml</filename> in the image
      type=delete section
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">suseRemovePackagesMarkedForDeletion
    </term>
    <listitem>
     <para>
      remove rpms defined in <filename>config.xml</filename> in the image
      type=delete section. The difference compared to baseStripRPM is that
      the suse variant checks if the package is really installed prior to
      passing it to rpm to uninstall it. The suse rpm exits with an error
      exit code while there are other rpm version which just ignore if an
      uninstall request was set on a package which is not installed
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseStripTools {list of toolpath} {list of tools}
    </term>
    <listitem>
     <para>
      helper function for suseStripInitrd function params: toolpath, tools
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseStripUnusedLibs
    </term>
    <listitem>
     <para>
      remove libraries which are not directly linked against applications in
      the bin directories
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseUpdateSysConfig {filename} {variable} {value}
    </term>
    <listitem>
     <para>
      update sysconfig variable contents
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">Debug {message}
    </term>
    <listitem>
     <para>
      Helper function to print a message if the variable
      <varname>DEBUG</varname> is set to 1
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">Echo {echo commandline}
    </term>
    <listitem>
     <para>
      Helper function to print a message to the controlling terminal
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">Rm {list of files}
    </term>
    <listitem>
     <para>
      Helper function to delete files and announce it to log
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">Rpm {rpm commandline}
    </term>
    <listitem>
     <para>
      Helper function to the RPM function and announce it to log
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">suseConfig
    </term>
    <listitem>
     <para>
      Setup keytable language, timezone and hwclock if specified in
      <filename>config.xml</filename> and call SuSEconfig afterwards
      SuSEconfig is only called on systems which still support it
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">suseInsertService {servicename}
    </term>
    <listitem>
     <para>
      This function calls baseInsertService and exists only for
      compatibility reasons
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">suseRemoveService {servicename}
    </term>
    <listitem>
     <para>
      This function calls baseRemoveService and exists only for
      compatibility reasons
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseInsertService {servicename}
    </term>
    <listitem>
     <para>
      Activate the given service by using the chkconfig or systemctl
      program. Which init system is in use is auto detected
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseRemoveService {servicename}
    </term>
    <listitem>
     <para>
      Deactivate the given service by using the chkconfig or systemctl
      program. Which init system is in use is auto detected
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">baseService {servicename} {on|off}
    </term>
    <listitem>
     <para>
      Activate/Deactivate a service by using the chkconfig or systemctl
      program. The function requires the service name and the value on or
      off as parameters. Which init system is in use is auto detected
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">suseActivateDefaultServices
    </term>
    <listitem>
     <para>
      Activates the following sysVInit services to be on by default using
      the chkconfig program: boot.rootfsck, boot.cleanup, boot.localfs,
      boot.localnet, boot.clock, policykitd, dbus, consolekit, haldaemon,
      network, atd, syslog, cron, kbd. And the following for systemd
      systems: network, cron
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">suseSetupProduct
    </term>
    <listitem>
     <para>
      This function creates the baseproduct link in /etc/products.d pointing
      to the installed product
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">suseSetupProductInformation
    </term>
    <listitem>
     <para>
      This function will use zypper to search for the installed product and
      install all product specific packages. This function only makes sense
      if zypper is used as package manager
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">suseStripPackager {-a}
    </term>
    <listitem>
     <para>
      Remove smart or zypper packages and db files Also remove rpm package
      and db if <option>-a</option> given
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>
 <refsect1 xml:id="kiwi.config.environment">
  <title>Profile environment variables</title>
  <para>
   The .profile environment file contains a specific set of variables which
   are listed below. Some of the functions above use the variables.
  </para>
  <variablelist>
   <varlistentry>
    <term version="5.0">$kiwi_compressed
    </term>
    <listitem>
     <para>
      The value of the compressed attribute set in the type element in
      <filename>config.xml</filename>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">$kiwi_delete
    </term>
    <listitem>
     <para>
      A list of all packages which are part of the packages section with
      <tag version="5.0" class="attribute">type</tag>="<tag version="5.0" class="attvalue">delete</tag>"
      in <filename>config.xml</filename>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">$kiwi_drivers
    </term>
    <listitem>
     <para>
      A comma separated list of the driver entries as listed in the drivers
      section of the <filename>config.xml</filename>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">$kiwi_iname
    </term>
    <listitem>
     <para>
      The name of the image as listed in <filename>config.xml</filename>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">$kiwi_iversion
    </term>
    <listitem>
     <para>
      The image version string major.minor.release
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">$kiwi_keytable
    </term>
    <listitem>
     <para>
      The contents of the keytable setup as done in
      <filename>config.xml</filename>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">$kiwi_language
    </term>
    <listitem>
     <para>
      The contents of the locale setup as done in
      <filename>config.xml</filename>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">$kiwi_profiles
    </term>
    <listitem>
     <para>
      A list of profiles used to build this image
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">$kiwi_size
    </term>
    <listitem>
     <para>
      The predefined size value for this image. This is not the computed
      size but only the optional size value of the preferences section in
      <filename>config.xml</filename>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">$kiwi_timezone
    </term>
    <listitem>
     <para>
      The contents of the timezone setup as done in
      <filename>config.xml</filename>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term version="5.0">$kiwi_type
    </term>
    <listitem>
     <para>
      The basic image type. Can be a simply file system image type of ext2,
      ext3, reiserfs, squashfs, cpio, or one of the following complex image
      types: iso, split, usb, vmx, oem, xen, or pxe.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>
</refentry>
